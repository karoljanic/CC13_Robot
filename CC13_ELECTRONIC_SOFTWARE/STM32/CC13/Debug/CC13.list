
CC13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000810c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  0800821c  0800821c  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b24  08008b24  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008b24  08008b24  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b24  08008b24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b2c  08008b2c  00018b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000078  08008ba4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08008ba4  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c500  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a9c  00000000  00000000  0003c59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  00040040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  00041648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019dba  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000121ef  00000000  00000000  0005c872  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080f33  00000000  00000000  0006ea61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  000efa10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008204 	.word	0x08008204

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008204 	.word	0x08008204

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a88:	f1a2 0201 	sub.w	r2, r2, #1
 8000a8c:	d1ed      	bne.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <__aeabi_f2uiz>:
 8000fc0:	0042      	lsls	r2, r0, #1
 8000fc2:	d20e      	bcs.n	8000fe2 <__aeabi_f2uiz+0x22>
 8000fc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc8:	d30b      	bcc.n	8000fe2 <__aeabi_f2uiz+0x22>
 8000fca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd2:	d409      	bmi.n	8000fe8 <__aeabi_f2uiz+0x28>
 8000fd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fdc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe0:	4770      	bx	lr
 8000fe2:	f04f 0000 	mov.w	r0, #0
 8000fe6:	4770      	bx	lr
 8000fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fec:	d101      	bne.n	8000ff2 <__aeabi_f2uiz+0x32>
 8000fee:	0242      	lsls	r2, r0, #9
 8000ff0:	d102      	bne.n	8000ff8 <__aeabi_f2uiz+0x38>
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	4770      	bx	lr
 8000ff8:	f04f 0000 	mov.w	r0, #0
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_ZN14DigitalLED_RGB4InitEP12GPIO_TypeDeftS1_tS1_tb>:
	GPIO_TypeDef *GPIOx_R, *GPIOx_G, *GPIOx_B;
	uint16_t GPIO_Pin_R, GPIO_Pin_G, GPIO_Pin_B;
	bool inverse;

public:
	inline void Init(GPIO_TypeDef *_GPIOx_R, uint16_t _GPIO_Pin_R,
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	80fb      	strh	r3, [r7, #6]
			         GPIO_TypeDef *_GPIOx_G, uint16_t _GPIO_Pin_G,
					 GPIO_TypeDef *_GPIOx_B, uint16_t _GPIO_Pin_B,
					 bool _inverse = false){
		GPIOx_R = _GPIOx_R; GPIO_Pin_R = _GPIO_Pin_R;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	819a      	strh	r2, [r3, #12]
		GPIOx_G = _GPIOx_G; GPIO_Pin_G = _GPIO_Pin_G;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8b3a      	ldrh	r2, [r7, #24]
 8001026:	81da      	strh	r2, [r3, #14]
		GPIOx_B = _GPIOx_B; GPIO_Pin_B = _GPIO_Pin_B;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8c3a      	ldrh	r2, [r7, #32]
 8001032:	821a      	strh	r2, [r3, #16]
		inverse = _inverse;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800103a:	749a      	strb	r2, [r3, #18]
	}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <_ZN6I2Cdev4InitEP19__I2C_HandleTypeDef>:
private:
	static I2C_HandleTypeDef *hi2c;
    public:
        I2Cdev();

        inline void Init(I2C_HandleTypeDef *_hi2c){ hi2c = _hi2c; };
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <_ZN6I2Cdev4InitEP19__I2C_HandleTypeDef+0x1c>)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200001e8 	.word	0x200001e8

08001068 <_Z3maxff>:
uint16_t fifoCount;
uint8_t fifoBuffer[64];

uint32_t supplies[3];

inline float max(float x, float y){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if(x<0)
 8001072:	f04f 0100 	mov.w	r1, #0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff54 	bl	8000f24 <__aeabi_fcmplt>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <_Z3maxff+0x22>
		x = -x;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001088:	607b      	str	r3, [r7, #4]
	if(y<0)
 800108a:	f04f 0100 	mov.w	r1, #0
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff ff48 	bl	8000f24 <__aeabi_fcmplt>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <_Z3maxff+0x3a>
		y = -y;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010a0:	603b      	str	r3, [r7, #0]
	if(x>y)
 80010a2:	6839      	ldr	r1, [r7, #0]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff5b 	bl	8000f60 <__aeabi_fcmpgt>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <_Z3maxff+0x4c>
		return x;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	e000      	b.n	80010b6 <_Z3maxff+0x4e>
	else
		return y;
 80010b4:	683b      	ldr	r3, [r7, #0]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_Z5setupv>:


inline void setup(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
	rgb1.Init(GPIOA, PA15_LED1R_Pin, GPIOB, PB3_LED1G_Pin, GPIOB, PB4_LED1B_Pin);
 80010c6:	2300      	movs	r3, #0
 80010c8:	9303      	str	r3, [sp, #12]
 80010ca:	2310      	movs	r3, #16
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <_Z5setupv+0x190>)
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2308      	movs	r3, #8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <_Z5setupv+0x190>)
 80010d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010dc:	495d      	ldr	r1, [pc, #372]	; (8001254 <_Z5setupv+0x194>)
 80010de:	485e      	ldr	r0, [pc, #376]	; (8001258 <_Z5setupv+0x198>)
 80010e0:	f7ff ff8e 	bl	8001000 <_ZN14DigitalLED_RGB4InitEP12GPIO_TypeDeftS1_tS1_tb>
	rgb2.Init(GPIOB, PB5_LED2R_Pin, GPIOB, PB6_LED2G_Pin, GPIOB, PB7_LED2B_Pin);
 80010e4:	2300      	movs	r3, #0
 80010e6:	9303      	str	r3, [sp, #12]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	4b58      	ldr	r3, [pc, #352]	; (8001250 <_Z5setupv+0x190>)
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	2340      	movs	r3, #64	; 0x40
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4b56      	ldr	r3, [pc, #344]	; (8001250 <_Z5setupv+0x190>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	4955      	ldr	r1, [pc, #340]	; (8001250 <_Z5setupv+0x190>)
 80010fa:	4858      	ldr	r0, [pc, #352]	; (800125c <_Z5setupv+0x19c>)
 80010fc:	f7ff ff80 	bl	8001000 <_ZN14DigitalLED_RGB4InitEP12GPIO_TypeDeftS1_tS1_tb>
	rgb1.Off();
 8001100:	4855      	ldr	r0, [pc, #340]	; (8001258 <_Z5setupv+0x198>)
 8001102:	f000 ff84 	bl	800200e <_ZN14DigitalLED_RGB3OffEv>
	rgb2.Off();
 8001106:	4855      	ldr	r0, [pc, #340]	; (800125c <_Z5setupv+0x19c>)
 8001108:	f000 ff81 	bl	800200e <_ZN14DigitalLED_RGB3OffEv>

	servo1.Init(&htim1, TIM_CHANNEL_3, 0, 180, 1);	// bottom servo
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	23b4      	movs	r3, #180	; 0xb4
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2208      	movs	r2, #8
 8001118:	4951      	ldr	r1, [pc, #324]	; (8001260 <_Z5setupv+0x1a0>)
 800111a:	4852      	ldr	r0, [pc, #328]	; (8001264 <_Z5setupv+0x1a4>)
 800111c:	f000 ff99 	bl	8002052 <_ZN10ServoMotor4InitEP17TIM_HandleTypeDefmmmb>
	servo2.Init(&htim1, TIM_CHANNEL_4, 0, 180, 1);	// top servo
 8001120:	2301      	movs	r3, #1
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	23b4      	movs	r3, #180	; 0xb4
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	220c      	movs	r2, #12
 800112c:	494c      	ldr	r1, [pc, #304]	; (8001260 <_Z5setupv+0x1a0>)
 800112e:	484e      	ldr	r0, [pc, #312]	; (8001268 <_Z5setupv+0x1a8>)
 8001130:	f000 ff8f 	bl	8002052 <_ZN10ServoMotor4InitEP17TIM_HandleTypeDefmmmb>
	servo1.PwmClarify(1200, 2200);
 8001134:	f640 0298 	movw	r2, #2200	; 0x898
 8001138:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800113c:	4849      	ldr	r0, [pc, #292]	; (8001264 <_Z5setupv+0x1a4>)
 800113e:	f001 f8c7 	bl	80022d0 <_ZN10ServoMotor10PwmClarifyEmm>
	servo2.PwmClarify(1200, 2200);
 8001142:	f640 0298 	movw	r2, #2200	; 0x898
 8001146:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800114a:	4847      	ldr	r0, [pc, #284]	; (8001268 <_Z5setupv+0x1a8>)
 800114c:	f001 f8c0 	bl	80022d0 <_ZN10ServoMotor10PwmClarifyEmm>
	servo1.SetNormal();
 8001150:	4844      	ldr	r0, [pc, #272]	; (8001264 <_Z5setupv+0x1a4>)
 8001152:	f001 f899 	bl	8002288 <_ZN10ServoMotor9SetNormalEv>
	servo2.SetNormal();
 8001156:	4844      	ldr	r0, [pc, #272]	; (8001268 <_Z5setupv+0x1a8>)
 8001158:	f001 f896 	bl	8002288 <_ZN10ServoMotor9SetNormalEv>

	motor1.Init(&htim1, TIM_CHANNEL_1, GPIOB, PB13_MA_IN1_Pin, GPIOB, PB12_MA_IN2_Pin, 1);
 800115c:	2301      	movs	r3, #1
 800115e:	9303      	str	r3, [sp, #12]
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <_Z5setupv+0x190>)
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	4b37      	ldr	r3, [pc, #220]	; (8001250 <_Z5setupv+0x190>)
 8001172:	2200      	movs	r2, #0
 8001174:	493a      	ldr	r1, [pc, #232]	; (8001260 <_Z5setupv+0x1a0>)
 8001176:	483d      	ldr	r0, [pc, #244]	; (800126c <_Z5setupv+0x1ac>)
 8001178:	f001 f8bb 	bl	80022f2 <_ZN7DCMotor4InitEP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tb>
	motor2.Init(&htim1, TIM_CHANNEL_2, GPIOB, PB14_MB_IN1_Pin, GPIOB, PB15_MB_IN2_Pin, 1);
 800117c:	2301      	movs	r3, #1
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <_Z5setupv+0x190>)
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <_Z5setupv+0x190>)
 8001192:	2204      	movs	r2, #4
 8001194:	4932      	ldr	r1, [pc, #200]	; (8001260 <_Z5setupv+0x1a0>)
 8001196:	4836      	ldr	r0, [pc, #216]	; (8001270 <_Z5setupv+0x1b0>)
 8001198:	f001 f8ab 	bl	80022f2 <_ZN7DCMotor4InitEP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tb>
	motor1.Off();
 800119c:	4833      	ldr	r0, [pc, #204]	; (800126c <_Z5setupv+0x1ac>)
 800119e:	f001 f8fc 	bl	800239a <_ZN7DCMotor3OffEv>
	motor2.Off();
 80011a2:	4833      	ldr	r0, [pc, #204]	; (8001270 <_Z5setupv+0x1b0>)
 80011a4:	f001 f8f9 	bl	800239a <_ZN7DCMotor3OffEv>

	encoder1.Init(&htim2, TIM_CHANNEL_1, 1920);
 80011a8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80011ac:	2200      	movs	r2, #0
 80011ae:	4931      	ldr	r1, [pc, #196]	; (8001274 <_Z5setupv+0x1b4>)
 80011b0:	4831      	ldr	r0, [pc, #196]	; (8001278 <_Z5setupv+0x1b8>)
 80011b2:	f001 f92d 	bl	8002410 <_ZN7Encoder4InitEP17TIM_HandleTypeDefmm>
	encoder2.Init(&htim3, TIM_CHANNEL_1, 1920);
 80011b6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80011ba:	2200      	movs	r2, #0
 80011bc:	492f      	ldr	r1, [pc, #188]	; (800127c <_Z5setupv+0x1bc>)
 80011be:	4830      	ldr	r0, [pc, #192]	; (8001280 <_Z5setupv+0x1c0>)
 80011c0:	f001 f926 	bl	8002410 <_ZN7Encoder4InitEP17TIM_HandleTypeDefmm>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	482e      	ldr	r0, [pc, #184]	; (8001284 <_Z5setupv+0x1c4>)
 80011cc:	f003 ff18 	bl	8005000 <HAL_GPIO_WritePin>

	HAL_UART_Receive_IT(&huart2, &char2, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	492d      	ldr	r1, [pc, #180]	; (8001288 <_Z5setupv+0x1c8>)
 80011d4:	482d      	ldr	r0, [pc, #180]	; (800128c <_Z5setupv+0x1cc>)
 80011d6:	f006 fb64 	bl	80078a2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &char3, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	492c      	ldr	r1, [pc, #176]	; (8001290 <_Z5setupv+0x1d0>)
 80011de:	482d      	ldr	r0, [pc, #180]	; (8001294 <_Z5setupv+0x1d4>)
 80011e0:	f006 fb5f 	bl	80078a2 <HAL_UART_Receive_IT>

	HAL_ADC_Start(&hadc1);
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <_Z5setupv+0x1d8>)
 80011e6:	f003 f89b 	bl	8004320 <HAL_ADC_Start>

	i2cdev.Init(&hi2c1);
 80011ea:	492c      	ldr	r1, [pc, #176]	; (800129c <_Z5setupv+0x1dc>)
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <_Z5setupv+0x1e0>)
 80011ee:	f7ff ff2b 	bl	8001048 <_ZN6I2Cdev4InitEP19__I2C_HandleTypeDef>

	mpu.initialize();
 80011f2:	482c      	ldr	r0, [pc, #176]	; (80012a4 <_Z5setupv+0x1e4>)
 80011f4:	f001 f944 	bl	8002480 <_ZN7MPU605010initializeEv>
	mpu.DMPInitialize();
 80011f8:	482a      	ldr	r0, [pc, #168]	; (80012a4 <_Z5setupv+0x1e4>)
 80011fa:	f001 fd8f 	bl	8002d1c <_ZN7MPU605013DMPInitializeEv>

	mpu.setFullScaleAccelerationRange(0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <_Z5setupv+0x1e4>)
 8001202:	f001 f9a2 	bl	800254a <_ZN7MPU605029setFullScaleAccelerationRangeEh>
	mpu.setFullScaleGyroscopeRange(0x00);
 8001206:	2100      	movs	r1, #0
 8001208:	4826      	ldr	r0, [pc, #152]	; (80012a4 <_Z5setupv+0x1e4>)
 800120a:	f001 f988 	bl	800251e <_ZN7MPU605026setFullScaleGyroscopeRangeEh>

	mpu.setXGyroscopeOffset(0);
 800120e:	2100      	movs	r1, #0
 8001210:	4824      	ldr	r0, [pc, #144]	; (80012a4 <_Z5setupv+0x1e4>)
 8001212:	f001 fb2e 	bl	8002872 <_ZN7MPU605019setXGyroscopeOffsetEs>
	mpu.setYGyroscopeOffset(0);
 8001216:	2100      	movs	r1, #0
 8001218:	4822      	ldr	r0, [pc, #136]	; (80012a4 <_Z5setupv+0x1e4>)
 800121a:	f001 fb3b 	bl	8002894 <_ZN7MPU605019setYGyroscopeOffsetEs>
	mpu.setZGyroscopeOffset(0);
 800121e:	2100      	movs	r1, #0
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <_Z5setupv+0x1e4>)
 8001222:	f001 fb48 	bl	80028b6 <_ZN7MPU605019setZGyroscopeOffsetEs>

	mpu.setXAccelerationOffset(0);
 8001226:	2100      	movs	r1, #0
 8001228:	481e      	ldr	r0, [pc, #120]	; (80012a4 <_Z5setupv+0x1e4>)
 800122a:	f001 faef 	bl	800280c <_ZN7MPU605022setXAccelerationOffsetEs>
	mpu.setYAccelerationOffset(0);
 800122e:	2100      	movs	r1, #0
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <_Z5setupv+0x1e4>)
 8001232:	f001 fafc 	bl	800282e <_ZN7MPU605022setYAccelerationOffsetEs>
	mpu.setZAccelerationOffset(0);
 8001236:	2100      	movs	r1, #0
 8001238:	481a      	ldr	r0, [pc, #104]	; (80012a4 <_Z5setupv+0x1e4>)
 800123a:	f001 fb09 	bl	8002850 <_ZN7MPU605022setZAccelerationOffsetEs>

	uint8_t packetSize = mpu.DMPGetFIFOPacketSize();
 800123e:	4819      	ldr	r0, [pc, #100]	; (80012a4 <_Z5setupv+0x1e4>)
 8001240:	f001 ffd6 	bl	80031f0 <_ZN7MPU605020DMPGetFIFOPacketSizeEv>
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]


}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40010800 	.word	0x40010800
 8001258:	20000094 	.word	0x20000094
 800125c:	200000a8 	.word	0x200000a8
 8001260:	20000340 	.word	0x20000340
 8001264:	200000c0 	.word	0x200000c0
 8001268:	200000f0 	.word	0x200000f0
 800126c:	20000120 	.word	0x20000120
 8001270:	2000013c 	.word	0x2000013c
 8001274:	20000380 	.word	0x20000380
 8001278:	20000158 	.word	0x20000158
 800127c:	20000300 	.word	0x20000300
 8001280:	20000164 	.word	0x20000164
 8001284:	40011000 	.word	0x40011000
 8001288:	20000190 	.word	0x20000190
 800128c:	20000400 	.word	0x20000400
 8001290:	20000191 	.word	0x20000191
 8001294:	200003c0 	.word	0x200003c0
 8001298:	200001f8 	.word	0x200001f8
 800129c:	2000026c 	.word	0x2000026c
 80012a0:	20000170 	.word	0x20000170
 80012a4:	20000174 	.word	0x20000174

080012a8 <_Z4loopv>:

inline void loop(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

	servo1.SetAngle(170);
 80012ac:	21aa      	movs	r1, #170	; 0xaa
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <_Z4loopv+0x38>)
 80012b0:	f000 fefe 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>
	servo2.SetAngle(10);
 80012b4:	210a      	movs	r1, #10
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <_Z4loopv+0x3c>)
 80012b8:	f000 fefa 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>

	HAL_Delay(1000);
 80012bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c0:	f002 ff34 	bl	800412c <HAL_Delay>

	servo2.SetAngle(170);
 80012c4:	21aa      	movs	r1, #170	; 0xaa
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <_Z4loopv+0x3c>)
 80012c8:	f000 fef2 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>
	servo1.SetAngle(10);
 80012cc:	210a      	movs	r1, #10
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <_Z4loopv+0x38>)
 80012d0:	f000 feee 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>

	HAL_Delay(1000);
 80012d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d8:	f002 ff28 	bl	800412c <HAL_Delay>

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000c0 	.word	0x200000c0
 80012e4:	200000f0 	.word	0x200000f0

080012e8 <_Z6setRGBP14DigitalLED_RGBi>:

inline void setRGB(DigitalLED_RGB *led, int info)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	led->On(1&info, 2&info, 4&info);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2d9      	uxtb	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf14      	ite	ne
 800130c:	2301      	movne	r3, #1
 800130e:	2300      	moveq	r3, #0
 8001310:	b2da      	uxtb	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fe44 	bl	8001fb0 <_ZN14DigitalLED_RGB2OnEbbb>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_Z9setServosP10ServoMotorS0_ii>:

inline void setServos(ServoMotor *topServo, ServoMotor *bottomServo, int infoX, int infoY)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
	x = 1.6*infoX;
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff f858 	bl	80003f4 <__aeabi_i2d>
 8001344:	a326      	add	r3, pc, #152	; (adr r3, 80013e0 <_Z9setServosP10ServoMotorS0_ii+0xb0>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f8bd 	bl	80004c8 <__aeabi_dmul>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	4618      	mov	r0, r3
 8001354:	4621      	mov	r1, r4
 8001356:	f7ff fae9 	bl	800092c <__aeabi_d2f>
 800135a:	4602      	mov	r2, r0
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <_Z9setServosP10ServoMotorS0_ii+0xc0>)
 800135e:	601a      	str	r2, [r3, #0]
	x+=10;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <_Z9setServosP10ServoMotorS0_ii+0xc0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4923      	ldr	r1, [pc, #140]	; (80013f4 <_Z9setServosP10ServoMotorS0_ii+0xc4>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb36 	bl	80009d8 <__addsf3>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <_Z9setServosP10ServoMotorS0_ii+0xc0>)
 8001372:	601a      	str	r2, [r3, #0]
	topServo->SetAngleProcent((uint32_t)x);
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <_Z9setServosP10ServoMotorS0_ii+0xc0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe21 	bl	8000fc0 <__aeabi_f2uiz>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f000 ff4c 	bl	8002220 <_ZN10ServoMotor15SetAngleProcentEm>
	y = 0.9*infoY;
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f7ff f833 	bl	80003f4 <__aeabi_i2d>
 800138e:	a316      	add	r3, pc, #88	; (adr r3, 80013e8 <_Z9setServosP10ServoMotorS0_ii+0xb8>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f898 	bl	80004c8 <__aeabi_dmul>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	4618      	mov	r0, r3
 800139e:	4621      	mov	r1, r4
 80013a0:	f7ff fac4 	bl	800092c <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <_Z9setServosP10ServoMotorS0_ii+0xc8>)
 80013a8:	601a      	str	r2, [r3, #0]
	y+=45;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <_Z9setServosP10ServoMotorS0_ii+0xc8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4913      	ldr	r1, [pc, #76]	; (80013fc <_Z9setServosP10ServoMotorS0_ii+0xcc>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fb11 	bl	80009d8 <__addsf3>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <_Z9setServosP10ServoMotorS0_ii+0xc8>)
 80013bc:	601a      	str	r2, [r3, #0]
	bottomServo->SetAngleProcent((uint32_t)y);
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_Z9setServosP10ServoMotorS0_ii+0xc8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fdfc 	bl	8000fc0 <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4619      	mov	r1, r3
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f000 ff27 	bl	8002220 <_ZN10ServoMotor15SetAngleProcentEm>
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3ff99999 	.word	0x3ff99999
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	3feccccc 	.word	0x3feccccc
 80013f0:	20000194 	.word	0x20000194
 80013f4:	41200000 	.word	0x41200000
 80013f8:	20000198 	.word	0x20000198
 80013fc:	42340000 	.word	0x42340000

08001400 <_Z9setMotorsP7DCMotorS0_ii>:

inline void setMotors(DCMotor *motorR, DCMotor *motorL, int infoX, int infoY)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
	if(infoX == 0 && infoY == 0)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d113      	bne.n	800143c <_Z9setMotorsP7DCMotorS0_ii+0x3c>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <_Z9setMotorsP7DCMotorS0_ii+0x3c>
	{
		motorR->SetValue(0);
 800141a:	2100      	movs	r1, #0
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 ffa0 	bl	8002362 <_ZN7DCMotor8SetValueEh>
		motorR->SetDirection(1);
 8001422:	2101      	movs	r1, #1
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 ffaa 	bl	800237e <_ZN7DCMotor12SetDirectionEb>

		motorL->SetValue(0);
 800142a:	2100      	movs	r1, #0
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f000 ff98 	bl	8002362 <_ZN7DCMotor8SetValueEh>
		motorL->SetDirection(1);
 8001432:	2101      	movs	r1, #1
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f000 ffa2 	bl	800237e <_ZN7DCMotor12SetDirectionEb>
		return;
 800143a:	e274      	b.n	8001926 <_Z9setMotorsP7DCMotorS0_ii+0x526>
	}

	x = 2*infoX - 100;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b32      	subs	r3, #50	; 0x32
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb7c 	bl	8000b40 <__aeabi_i2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 800144c:	601a      	str	r2, [r3, #0]
	if(x<0){
 800144e:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd64 	bl	8000f24 <__aeabi_fcmplt>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01d      	beq.n	800149e <_Z9setMotorsP7DCMotorS0_ii+0x9e>
		x = (int)((-x)/10);
 8001462:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800146a:	498f      	ldr	r1, [pc, #572]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc6f 	bl	8000d50 <__aeabi_fdiv>
 8001472:	4603      	mov	r3, r0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd7d 	bl	8000f74 <__aeabi_f2iz>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fb5f 	bl	8000b40 <__aeabi_i2f>
 8001482:	4602      	mov	r2, r0
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 8001486:	601a      	str	r2, [r3, #0]
		x *= -10;
 8001488:	4b86      	ldr	r3, [pc, #536]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4987      	ldr	r1, [pc, #540]	; (80016ac <_Z9setMotorsP7DCMotorS0_ii+0x2ac>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fbaa 	bl	8000be8 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e01a      	b.n	80014d4 <_Z9setMotorsP7DCMotorS0_ii+0xd4>
	}
	else{
		x = (int)((x)/10);
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4981      	ldr	r1, [pc, #516]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc53 	bl	8000d50 <__aeabi_fdiv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd61 	bl	8000f74 <__aeabi_f2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fb43 	bl	8000b40 <__aeabi_i2f>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80014be:	601a      	str	r2, [r3, #0]
		x *= 10;
 80014c0:	4b78      	ldr	r3, [pc, #480]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4978      	ldr	r1, [pc, #480]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb8e 	bl	8000be8 <__aeabi_fmul>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80014d2:	601a      	str	r2, [r3, #0]
	}

	y = 2*infoY - 100;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3b32      	subs	r3, #50	; 0x32
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb30 	bl	8000b40 <__aeabi_i2f>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 80014e4:	601a      	str	r2, [r3, #0]
	if(y<0){
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd18 	bl	8000f24 <__aeabi_fcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01d      	beq.n	8001536 <_Z9setMotorsP7DCMotorS0_ii+0x136>
		y = (int)((-y)/10);
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001502:	4969      	ldr	r1, [pc, #420]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fc23 	bl	8000d50 <__aeabi_fdiv>
 800150a:	4603      	mov	r3, r0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fd31 	bl	8000f74 <__aeabi_f2iz>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb13 	bl	8000b40 <__aeabi_i2f>
 800151a:	4602      	mov	r2, r0
 800151c:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 800151e:	601a      	str	r2, [r3, #0]
		y *= -10;
 8001520:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4961      	ldr	r1, [pc, #388]	; (80016ac <_Z9setMotorsP7DCMotorS0_ii+0x2ac>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb5e 	bl	8000be8 <__aeabi_fmul>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e01a      	b.n	800156c <_Z9setMotorsP7DCMotorS0_ii+0x16c>
	}
	else{
		y = (int)((y)/10);
 8001536:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	495b      	ldr	r1, [pc, #364]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc07 	bl	8000d50 <__aeabi_fdiv>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fd15 	bl	8000f74 <__aeabi_f2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff faf7 	bl	8000b40 <__aeabi_i2f>
 8001552:	4602      	mov	r2, r0
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001556:	601a      	str	r2, [r3, #0]
		y *= 10;
 8001558:	4b55      	ldr	r3, [pc, #340]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4952      	ldr	r1, [pc, #328]	; (80016a8 <_Z9setMotorsP7DCMotorS0_ii+0x2a8>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 800156a:	601a      	str	r2, [r3, #0]
	}


	if(x <= 20 && x >= -20 && y == 100){		// {12:00}
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4950      	ldr	r1, [pc, #320]	; (80016b4 <_Z9setMotorsP7DCMotorS0_ii+0x2b4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fce0 	bl	8000f38 <__aeabi_fcmple>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d018      	beq.n	80015b0 <_Z9setMotorsP7DCMotorS0_ii+0x1b0>
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	494d      	ldr	r1, [pc, #308]	; (80016b8 <_Z9setMotorsP7DCMotorS0_ii+0x2b8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fce1 	bl	8000f4c <__aeabi_fcmpge>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00f      	beq.n	80015b0 <_Z9setMotorsP7DCMotorS0_ii+0x1b0>
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4949      	ldr	r1, [pc, #292]	; (80016bc <_Z9setMotorsP7DCMotorS0_ii+0x2bc>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fcba 	bl	8000f10 <__aeabi_fcmpeq>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <_Z9setMotorsP7DCMotorS0_ii+0x1b0>
		m1 = 100;
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <_Z9setMotorsP7DCMotorS0_ii+0x2c0>)
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <_Z9setMotorsP7DCMotorS0_ii+0x2bc>)
 80015a6:	601a      	str	r2, [r3, #0]
		m2 = 100;
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <_Z9setMotorsP7DCMotorS0_ii+0x2c4>)
 80015aa:	4a44      	ldr	r2, [pc, #272]	; (80016bc <_Z9setMotorsP7DCMotorS0_ii+0x2bc>)
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e15c      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x <= 20 && x >= -20 && y == -100){	// {6:00}
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	493f      	ldr	r1, [pc, #252]	; (80016b4 <_Z9setMotorsP7DCMotorS0_ii+0x2b4>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fcbe 	bl	8000f38 <__aeabi_fcmple>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d018      	beq.n	80015f4 <_Z9setMotorsP7DCMotorS0_ii+0x1f4>
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	493c      	ldr	r1, [pc, #240]	; (80016b8 <_Z9setMotorsP7DCMotorS0_ii+0x2b8>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fcbf 	bl	8000f4c <__aeabi_fcmpge>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00f      	beq.n	80015f4 <_Z9setMotorsP7DCMotorS0_ii+0x1f4>
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	493b      	ldr	r1, [pc, #236]	; (80016c8 <_Z9setMotorsP7DCMotorS0_ii+0x2c8>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fc98 	bl	8000f10 <__aeabi_fcmpeq>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <_Z9setMotorsP7DCMotorS0_ii+0x1f4>
		m1 = -100;
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <_Z9setMotorsP7DCMotorS0_ii+0x2c0>)
 80015e8:	4a37      	ldr	r2, [pc, #220]	; (80016c8 <_Z9setMotorsP7DCMotorS0_ii+0x2c8>)
 80015ea:	601a      	str	r2, [r3, #0]
		m2 = -100;
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <_Z9setMotorsP7DCMotorS0_ii+0x2c4>)
 80015ee:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <_Z9setMotorsP7DCMotorS0_ii+0x2c8>)
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e13a      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x == 0){
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc87 	bl	8000f10 <__aeabi_fcmpeq>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <_Z9setMotorsP7DCMotorS0_ii+0x21a>
	m1 = y;
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <_Z9setMotorsP7DCMotorS0_ii+0x2c0>)
 800160e:	6013      	str	r3, [r2, #0]
	m2 = y;
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <_Z9setMotorsP7DCMotorS0_ii+0x2c4>)
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e127      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x == 100 && y >= -20 && y <= 20){	// {3:00}
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4927      	ldr	r1, [pc, #156]	; (80016bc <_Z9setMotorsP7DCMotorS0_ii+0x2bc>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fc75 	bl	8000f10 <__aeabi_fcmpeq>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d018      	beq.n	800165e <_Z9setMotorsP7DCMotorS0_ii+0x25e>
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4921      	ldr	r1, [pc, #132]	; (80016b8 <_Z9setMotorsP7DCMotorS0_ii+0x2b8>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fc8a 	bl	8000f4c <__aeabi_fcmpge>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00f      	beq.n	800165e <_Z9setMotorsP7DCMotorS0_ii+0x25e>
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	491c      	ldr	r1, [pc, #112]	; (80016b4 <_Z9setMotorsP7DCMotorS0_ii+0x2b4>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fc77 	bl	8000f38 <__aeabi_fcmple>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <_Z9setMotorsP7DCMotorS0_ii+0x25e>
		m1 = 50;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <_Z9setMotorsP7DCMotorS0_ii+0x2c0>)
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <_Z9setMotorsP7DCMotorS0_ii+0x2cc>)
 8001654:	601a      	str	r2, [r3, #0]
		m2 = -50;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <_Z9setMotorsP7DCMotorS0_ii+0x2c4>)
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <_Z9setMotorsP7DCMotorS0_ii+0x2d0>)
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e105      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x == -100 && y >= -20 && y <= 20){	// {9:00}
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_Z9setMotorsP7DCMotorS0_ii+0x2a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4919      	ldr	r1, [pc, #100]	; (80016c8 <_Z9setMotorsP7DCMotorS0_ii+0x2c8>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc53 	bl	8000f10 <__aeabi_fcmpeq>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d031      	beq.n	80016d4 <_Z9setMotorsP7DCMotorS0_ii+0x2d4>
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4910      	ldr	r1, [pc, #64]	; (80016b8 <_Z9setMotorsP7DCMotorS0_ii+0x2b8>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fc68 	bl	8000f4c <__aeabi_fcmpge>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d028      	beq.n	80016d4 <_Z9setMotorsP7DCMotorS0_ii+0x2d4>
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <_Z9setMotorsP7DCMotorS0_ii+0x2b0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	490b      	ldr	r1, [pc, #44]	; (80016b4 <_Z9setMotorsP7DCMotorS0_ii+0x2b4>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fc55 	bl	8000f38 <__aeabi_fcmple>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01f      	beq.n	80016d4 <_Z9setMotorsP7DCMotorS0_ii+0x2d4>
		m1 = -50;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <_Z9setMotorsP7DCMotorS0_ii+0x2c0>)
 8001696:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <_Z9setMotorsP7DCMotorS0_ii+0x2d0>)
 8001698:	601a      	str	r2, [r3, #0]
		m2 = 50;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <_Z9setMotorsP7DCMotorS0_ii+0x2c4>)
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <_Z9setMotorsP7DCMotorS0_ii+0x2cc>)
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e0e3      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
 80016a2:	bf00      	nop
 80016a4:	20000194 	.word	0x20000194
 80016a8:	41200000 	.word	0x41200000
 80016ac:	c1200000 	.word	0xc1200000
 80016b0:	20000198 	.word	0x20000198
 80016b4:	41a00000 	.word	0x41a00000
 80016b8:	c1a00000 	.word	0xc1a00000
 80016bc:	42c80000 	.word	0x42c80000
 80016c0:	2000019c 	.word	0x2000019c
 80016c4:	200001a0 	.word	0x200001a0
 80016c8:	c2c80000 	.word	0xc2c80000
 80016cc:	42480000 	.word	0x42480000
 80016d0:	c2480000 	.word	0xc2480000
	}
	else if(x >= 0 && y >= 0){
 80016d4:	4b95      	ldr	r3, [pc, #596]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc35 	bl	8000f4c <__aeabi_fcmpge>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d02e      	beq.n	8001746 <_Z9setMotorsP7DCMotorS0_ii+0x346>
 80016e8:	4b91      	ldr	r3, [pc, #580]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc2b 	bl	8000f4c <__aeabi_fcmpge>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d024      	beq.n	8001746 <_Z9setMotorsP7DCMotorS0_ii+0x346>
		m1 = 0.75*max(x,y);
 80016fc:	4b8b      	ldr	r3, [pc, #556]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f7ff fcae 	bl	8001068 <_Z3maxff>
 800170c:	4603      	mov	r3, r0
 800170e:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa68 	bl	8000be8 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b85      	ldr	r3, [pc, #532]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 800171e:	601a      	str	r2, [r3, #0]
		m2 = 0.25*max(x,y);
 8001720:	4b82      	ldr	r3, [pc, #520]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b82      	ldr	r3, [pc, #520]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7ff fc9c 	bl	8001068 <_Z3maxff>
 8001730:	4603      	mov	r3, r0
 8001732:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fa56 	bl	8000be8 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e091      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x <= 0 && y >= 0){
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f04f 0100 	mov.w	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fbf2 	bl	8000f38 <__aeabi_fcmple>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d02e      	beq.n	80017b8 <_Z9setMotorsP7DCMotorS0_ii+0x3b8>
 800175a:	4b75      	ldr	r3, [pc, #468]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fbf2 	bl	8000f4c <__aeabi_fcmpge>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <_Z9setMotorsP7DCMotorS0_ii+0x3b8>
		m1 = 0.25*max(x,y);
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f7ff fc75 	bl	8001068 <_Z3maxff>
 800177e:	4603      	mov	r3, r0
 8001780:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa2f 	bl	8000be8 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b69      	ldr	r3, [pc, #420]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001790:	601a      	str	r2, [r3, #0]
		m2 = 0.75*max(x,y);
 8001792:	4b66      	ldr	r3, [pc, #408]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b66      	ldr	r3, [pc, #408]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff fc63 	bl	8001068 <_Z3maxff>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa1d 	bl	8000be8 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e058      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else if(x <= 0 && y <= 0){
 80017b8:	4b5c      	ldr	r3, [pc, #368]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fbb9 	bl	8000f38 <__aeabi_fcmple>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d02c      	beq.n	8001826 <_Z9setMotorsP7DCMotorS0_ii+0x426>
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fbaf 	bl	8000f38 <__aeabi_fcmple>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d022      	beq.n	8001826 <_Z9setMotorsP7DCMotorS0_ii+0x426>
		m1 = -0.75*max(x,y);
 80017e0:	4b52      	ldr	r3, [pc, #328]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f7ff fc3c 	bl	8001068 <_Z3maxff>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4952      	ldr	r1, [pc, #328]	; (800193c <_Z9setMotorsP7DCMotorS0_ii+0x53c>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f9f7 	bl	8000be8 <__aeabi_fmul>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001800:	601a      	str	r2, [r3, #0]
		m2 = -0.25*max(x,y);
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7ff fc2b 	bl	8001068 <_Z3maxff>
 8001812:	4603      	mov	r3, r0
 8001814:	494a      	ldr	r1, [pc, #296]	; (8001940 <_Z9setMotorsP7DCMotorS0_ii+0x540>)
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f9e6 	bl	8000be8 <__aeabi_fmul>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b45      	ldr	r3, [pc, #276]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e021      	b.n	800186a <_Z9setMotorsP7DCMotorS0_ii+0x46a>
	}
	else{
		m1 = -0.25*max(x,y);
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7ff fc19 	bl	8001068 <_Z3maxff>
 8001836:	4603      	mov	r3, r0
 8001838:	4941      	ldr	r1, [pc, #260]	; (8001940 <_Z9setMotorsP7DCMotorS0_ii+0x540>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f9d4 	bl	8000be8 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001846:	601a      	str	r2, [r3, #0]
		m2 = -0.75*max(x,y);
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <_Z9setMotorsP7DCMotorS0_ii+0x52c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <_Z9setMotorsP7DCMotorS0_ii+0x530>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff fc08 	bl	8001068 <_Z3maxff>
 8001858:	4603      	mov	r3, r0
 800185a:	4938      	ldr	r1, [pc, #224]	; (800193c <_Z9setMotorsP7DCMotorS0_ii+0x53c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f9c3 	bl	8000be8 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 8001868:	601a      	str	r2, [r3, #0]
	}

	if(m1 < 0){
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fb56 	bl	8000f24 <__aeabi_fcmplt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <_Z9setMotorsP7DCMotorS0_ii+0x4aa>
		motorR->SetDirection(0);
 800187e:	2100      	movs	r1, #0
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fd7c 	bl	800237e <_ZN7DCMotor12SetDirectionEb>
		m1 = -m1;
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001890:	6013      	str	r3, [r2, #0]
		motorR->SetValue((uint8_t)m1);
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb92 	bl	8000fc0 <__aeabi_f2uiz>
 800189c:	4603      	mov	r3, r0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fd5d 	bl	8002362 <_ZN7DCMotor8SetValueEh>
 80018a8:	e00e      	b.n	80018c8 <_Z9setMotorsP7DCMotorS0_ii+0x4c8>
	}
	else{
		motorR->SetDirection(1);
 80018aa:	2101      	movs	r1, #1
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 fd66 	bl	800237e <_ZN7DCMotor12SetDirectionEb>
		motorR->SetValue((uint8_t)m1);
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <_Z9setMotorsP7DCMotorS0_ii+0x534>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb82 	bl	8000fc0 <__aeabi_f2uiz>
 80018bc:	4603      	mov	r3, r0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fd4d 	bl	8002362 <_ZN7DCMotor8SetValueEh>
	}

	if(m2 < 0){
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fb27 	bl	8000f24 <__aeabi_fcmplt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_Z9setMotorsP7DCMotorS0_ii+0x508>
		motorL->SetDirection(0);
 80018dc:	2100      	movs	r1, #0
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd4d 	bl	800237e <_ZN7DCMotor12SetDirectionEb>
		m2 = -m2;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 80018ee:	6013      	str	r3, [r2, #0]
		motorL->SetValue((uint8_t)m2);
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb63 	bl	8000fc0 <__aeabi_f2uiz>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	68b8      	ldr	r0, [r7, #8]
 8001902:	f000 fd2e 	bl	8002362 <_ZN7DCMotor8SetValueEh>
 8001906:	e00e      	b.n	8001926 <_Z9setMotorsP7DCMotorS0_ii+0x526>
	}
	else{
		motorL->SetDirection(1);
 8001908:	2101      	movs	r1, #1
 800190a:	68b8      	ldr	r0, [r7, #8]
 800190c:	f000 fd37 	bl	800237e <_ZN7DCMotor12SetDirectionEb>
		motorL->SetValue((uint8_t)m2);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <_Z9setMotorsP7DCMotorS0_ii+0x538>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb53 	bl	8000fc0 <__aeabi_f2uiz>
 800191a:	4603      	mov	r3, r0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f000 fd1e 	bl	8002362 <_ZN7DCMotor8SetValueEh>
	}

}
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000194 	.word	0x20000194
 8001930:	20000198 	.word	0x20000198
 8001934:	2000019c 	.word	0x2000019c
 8001938:	200001a0 	.word	0x200001a0
 800193c:	bf400000 	.word	0xbf400000
 8001940:	be800000 	.word	0xbe800000

08001944 <_Z13UART_CallbackP20__UART_HandleTypeDef>:
	uint8_t send_info[] = {100, 101, 102};
	HAL_UART_Transmit(&huart2, send_info, 3, 500);
}


inline void UART_Callback(UART_HandleTypeDef *huart){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a66      	ldr	r2, [pc, #408]	; (8001aec <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 80c5 	bne.w	8001ae2 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x19e>
	{

		if(char2 == 10){
 8001958:	4b65      	ldr	r3, [pc, #404]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0a      	cmp	r3, #10
 800195e:	f000 80bb 	beq.w	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>

		}
		else if(char2 == 11){
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b0b      	cmp	r3, #11
 8001968:	d10d      	bne.n	8001986 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x42>
			HAL_UART_Receive(&huart2, &infoX, 1, 5000);
 800196a:	f241 3388 	movw	r3, #5000	; 0x1388
 800196e:	2201      	movs	r2, #1
 8001970:	4960      	ldr	r1, [pc, #384]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 8001972:	4861      	ldr	r0, [pc, #388]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001974:	f005 feef 	bl	8007756 <HAL_UART_Receive>
			setRGB(&rgb1, infoX);
 8001978:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	485f      	ldr	r0, [pc, #380]	; (8001afc <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b8>)
 8001980:	f7ff fcb2 	bl	80012e8 <_Z6setRGBP14DigitalLED_RGBi>
 8001984:	e0a8      	b.n	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>
		}
		else if(char2 == 12){
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d10d      	bne.n	80019aa <_Z13UART_CallbackP20__UART_HandleTypeDef+0x66>
			HAL_UART_Receive(&huart2, &infoX, 1, 5000);
 800198e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001992:	2201      	movs	r2, #1
 8001994:	4957      	ldr	r1, [pc, #348]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 8001996:	4858      	ldr	r0, [pc, #352]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001998:	f005 fedd 	bl	8007756 <HAL_UART_Receive>
			setRGB(&rgb2, infoX);
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4857      	ldr	r0, [pc, #348]	; (8001b00 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1bc>)
 80019a4:	f7ff fca0 	bl	80012e8 <_Z6setRGBP14DigitalLED_RGBi>
 80019a8:	e096      	b.n	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>
		}
		else if(char2 == 21)
 80019aa:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b15      	cmp	r3, #21
 80019b0:	d117      	bne.n	80019e2 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x9e>
		{
			HAL_UART_Receive(&huart2, &infoX, 1, 5000);
 80019b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b6:	2201      	movs	r2, #1
 80019b8:	494e      	ldr	r1, [pc, #312]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 80019ba:	484f      	ldr	r0, [pc, #316]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 80019bc:	f005 fecb 	bl	8007756 <HAL_UART_Receive>
			HAL_UART_Receive(&huart2, &infoY, 1, 5000);
 80019c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80019c4:	2201      	movs	r2, #1
 80019c6:	494f      	ldr	r1, [pc, #316]	; (8001b04 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c0>)
 80019c8:	484b      	ldr	r0, [pc, #300]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 80019ca:	f005 fec4 	bl	8007756 <HAL_UART_Receive>
			setMotors(&motor1, &motor2, infoX, infoY);
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c0>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	494b      	ldr	r1, [pc, #300]	; (8001b08 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c4>)
 80019da:	484c      	ldr	r0, [pc, #304]	; (8001b0c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c8>)
 80019dc:	f7ff fd10 	bl	8001400 <_Z9setMotorsP7DCMotorS0_ii>
 80019e0:	e07a      	b.n	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>

		}
		else if(char2 == 22)
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b16      	cmp	r3, #22
 80019e8:	d117      	bne.n	8001a1a <_Z13UART_CallbackP20__UART_HandleTypeDef+0xd6>
		{
			HAL_UART_Receive(&huart2, &infoX, 1, 5000);
 80019ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ee:	2201      	movs	r2, #1
 80019f0:	4940      	ldr	r1, [pc, #256]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 80019f2:	4841      	ldr	r0, [pc, #260]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 80019f4:	f005 feaf 	bl	8007756 <HAL_UART_Receive>
			HAL_UART_Receive(&huart2, &infoY, 1, 5000);
 80019f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80019fc:	2201      	movs	r2, #1
 80019fe:	4941      	ldr	r1, [pc, #260]	; (8001b04 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c0>)
 8001a00:	483d      	ldr	r0, [pc, #244]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001a02:	f005 fea8 	bl	8007756 <HAL_UART_Receive>
			setServos(&servo2, &servo1, infoX, infoY);
 8001a06:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1c0>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	493f      	ldr	r1, [pc, #252]	; (8001b10 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1cc>)
 8001a12:	4840      	ldr	r0, [pc, #256]	; (8001b14 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d0>)
 8001a14:	f7ff fc8c 	bl	8001330 <_Z9setServosP10ServoMotorS0_ii>
 8001a18:	e05e      	b.n	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>
		}
		else if(char2 == 51)
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b33      	cmp	r3, #51	; 0x33
 8001a20:	d15a      	bne.n	8001ad8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x194>
		{
			mpu.resetFIFO();
 8001a22:	483d      	ldr	r0, [pc, #244]	; (8001b18 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d4>)
 8001a24:	f000 fe3e 	bl	80026a4 <_ZN7MPU60509resetFIFOEv>
			fifoCount = mpu.getFIFOCount();
 8001a28:	483b      	ldr	r0, [pc, #236]	; (8001b18 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d4>)
 8001a2a:	f000 feb1 	bl	8002790 <_ZN7MPU605012getFIFOCountEv>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d8>)
 8001a34:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d8>)
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1dc>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d207      	bcs.n	8001a52 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x10e>
				fifoCount = mpu.getFIFOCount();
 8001a42:	4835      	ldr	r0, [pc, #212]	; (8001b18 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d4>)
 8001a44:	f000 fea4 	bl	8002790 <_ZN7MPU605012getFIFOCountEv>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d8>)
 8001a4e:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001a50:	e7f1      	b.n	8001a36 <_Z13UART_CallbackP20__UART_HandleTypeDef+0xf2>
			mpu.getFIFOBytes(fifoBuffer, packetSize);
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1dc>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4932      	ldr	r1, [pc, #200]	; (8001b24 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1e0>)
 8001a5c:	482e      	ldr	r0, [pc, #184]	; (8001b18 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1d4>)
 8001a5e:	f000 feb7 	bl	80027d0 <_ZN7MPU605012getFIFOBytesEPhh>

			HAL_UART_Transmit(&huart2, &fifoBuffer[0], 1, 500);
 8001a62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a66:	2201      	movs	r2, #1
 8001a68:	492e      	ldr	r1, [pc, #184]	; (8001b24 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1e0>)
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001a6c:	f005 fdda 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[1], 1, 500);
 8001a70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a74:	2201      	movs	r2, #1
 8001a76:	492c      	ldr	r1, [pc, #176]	; (8001b28 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1e4>)
 8001a78:	481f      	ldr	r0, [pc, #124]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001a7a:	f005 fdd3 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[4], 1, 500);
 8001a7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a82:	2201      	movs	r2, #1
 8001a84:	4929      	ldr	r1, [pc, #164]	; (8001b2c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1e8>)
 8001a86:	481c      	ldr	r0, [pc, #112]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001a88:	f005 fdcc 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[5], 1, 500);
 8001a8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a90:	2201      	movs	r2, #1
 8001a92:	4927      	ldr	r1, [pc, #156]	; (8001b30 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ec>)
 8001a94:	4818      	ldr	r0, [pc, #96]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001a96:	f005 fdc5 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[8], 1, 500);
 8001a9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4924      	ldr	r1, [pc, #144]	; (8001b34 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1f0>)
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001aa4:	f005 fdbe 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[9], 1, 500);
 8001aa8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aac:	2201      	movs	r2, #1
 8001aae:	4922      	ldr	r1, [pc, #136]	; (8001b38 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1f4>)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001ab2:	f005 fdb7 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[12], 1, 500);
 8001ab6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aba:	2201      	movs	r2, #1
 8001abc:	491f      	ldr	r1, [pc, #124]	; (8001b3c <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1f8>)
 8001abe:	480e      	ldr	r0, [pc, #56]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001ac0:	f005 fdb0 	bl	8007624 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &fifoBuffer[13], 1, 500);
 8001ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	491d      	ldr	r1, [pc, #116]	; (8001b40 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1fc>)
 8001acc:	480a      	ldr	r0, [pc, #40]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001ace:	f005 fda9 	bl	8007624 <HAL_UART_Transmit>
			rgb1.Toggle();
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b8>)
 8001ad4:	f000 faac 	bl	8002030 <_ZN14DigitalLED_RGB6ToggleEv>
		}

		HAL_UART_Receive_IT(&huart2, &char2, 1);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4905      	ldr	r1, [pc, #20]	; (8001af0 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1ac>)
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <_Z13UART_CallbackP20__UART_HandleTypeDef+0x1b4>)
 8001ade:	f005 fee0 	bl	80078a2 <HAL_UART_Receive_IT>
	if(huart->Instance == USART3)
	{


	}
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40004400 	.word	0x40004400
 8001af0:	20000190 	.word	0x20000190
 8001af4:	20000192 	.word	0x20000192
 8001af8:	20000400 	.word	0x20000400
 8001afc:	20000094 	.word	0x20000094
 8001b00:	200000a8 	.word	0x200000a8
 8001b04:	20000193 	.word	0x20000193
 8001b08:	2000013c 	.word	0x2000013c
 8001b0c:	20000120 	.word	0x20000120
 8001b10:	200000c0 	.word	0x200000c0
 8001b14:	200000f0 	.word	0x200000f0
 8001b18:	20000174 	.word	0x20000174
 8001b1c:	200001a6 	.word	0x200001a6
 8001b20:	200001a4 	.word	0x200001a4
 8001b24:	200001a8 	.word	0x200001a8
 8001b28:	200001a9 	.word	0x200001a9
 8001b2c:	200001ac 	.word	0x200001ac
 8001b30:	200001ad 	.word	0x200001ad
 8001b34:	200001b0 	.word	0x200001b0
 8001b38:	200001b1 	.word	0x200001b1
 8001b3c:	200001b4 	.word	0x200001b4
 8001b40:	200001b5 	.word	0x200001b5

08001b44 <extern_setup>:


extern "C" {
void extern_setup(void) { setup(); }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f7ff faba 	bl	80010c0 <_Z5setupv>
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <extern_loop>:
void extern_loop(void)  { loop();  }
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	f7ff fba8 	bl	80012a8 <_Z4loopv>
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <extern_UART_Callback>:
void extern_UART_Callback(UART_HandleTypeDef *huart)  { UART_Callback(huart); }
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff feed 	bl	8001944 <_Z13UART_CallbackP20__UART_HandleTypeDef>
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10a      	bne.n	8001b9a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d105      	bne.n	8001b9a <_Z41__static_initialization_and_destruction_0ii+0x26>
I2Cdev i2cdev;
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b90:	f000 f814 	bl	8001bbc <_ZN6I2CdevC1Ev>
MPU6050 mpu;
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b96:	f000 fc60 	bl	800245a <_ZN7MPU6050C1Ev>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000170 	.word	0x20000170
 8001ba8:	20000174 	.word	0x20000174

08001bac <_GLOBAL__sub_I_rgb1>:
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff ffdd 	bl	8001b74 <_Z41__static_initialization_and_destruction_0ii>
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN6I2CdevC1Ev>:
/** Default constructor.
 */

I2C_HandleTypeDef *I2Cdev::hi2c = NULL;

I2Cdev::I2Cdev() {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
}
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <_ZN6I2Cdev8readByteEhhPht>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	603a      	str	r2, [r7, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	460b      	mov	r3, r1
 8001be0:	71bb      	strb	r3, [r7, #6]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80bb      	strh	r3, [r7, #4]
    return readBytes(devAddr, regAddr, 1, data, timeout);
 8001be6:	79b9      	ldrb	r1, [r7, #6]
 8001be8:	79f8      	ldrb	r0, [r7, #7]
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f000 f805 	bl	8001c00 <_ZN6I2Cdev9readBytesEhhhPht>
 8001bf6:	4603      	mov	r3, r0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	71bb      	strb	r3, [r7, #6]
 8001c10:	4613      	mov	r3, r2
 8001c12:	717b      	strb	r3, [r7, #5]
  //  int8_t count = 0;
 //   uint32_t t1 = millis();

    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(hi2c, devAddr, regAddr, 1, data, length, timeout);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <_ZN6I2Cdev9readBytesEhhhPht+0x54>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	b299      	uxth	r1, r3
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	b29c      	uxth	r4, r3
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	8c3a      	ldrh	r2, [r7, #32]
 8001c26:	9202      	str	r2, [sp, #8]
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4622      	mov	r2, r4
 8001c32:	f003 fc37 	bl	80054a4 <HAL_I2C_Mem_Read>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
    return status== HAL_OK ? length: -1;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_ZN6I2Cdev9readBytesEhhhPht+0x46>
 8001c40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c44:	e001      	b.n	8001c4a <_ZN6I2Cdev9readBytesEhhhPht+0x4a>
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295

    // check for timeout
    //if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout

    //return count;
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200001e8 	.word	0x200001e8

08001c58 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	717b      	strb	r3, [r7, #5]
 8001c72:	4613      	mov	r3, r2
 8001c74:	713b      	strb	r3, [r7, #4]
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <_ZN6I2Cdev8writeBitEhhhh+0x7c>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f107 020f 	add.w	r2, r7, #15
 8001c7e:	79b9      	ldrb	r1, [r7, #6]
 8001c80:	79f8      	ldrb	r0, [r7, #7]
 8001c82:	f7ff ffa5 	bl	8001bd0 <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001c86:	793b      	ldrb	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	e00b      	b.n	8001cba <_ZN6I2Cdev8writeBitEhhhh+0x62>
 8001ca2:	797b      	ldrb	r3, [r7, #5]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	b25b      	sxtb	r3, r3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	73fb      	strb	r3, [r7, #15]
    return writeByte(devAddr, regAddr, b);
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	79b9      	ldrb	r1, [r7, #6]
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f864 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4604      	mov	r4, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	4603      	mov	r3, r0
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	717b      	strb	r3, [r7, #5]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	713b      	strb	r3, [r7, #4]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <_ZN6I2Cdev9writeBitsEhhhhh+0xb4>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f107 020f 	add.w	r2, r7, #15
 8001cfe:	79b9      	ldrb	r1, [r7, #6]
 8001d00:	79f8      	ldrb	r0, [r7, #7]
 8001d02:	f7ff ff65 	bl	8001bd0 <_ZN6I2Cdev8readByteEhhPht>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d034      	beq.n	8001d80 <_ZN6I2Cdev9writeBitsEhhhhh+0xa8>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001d16:	793b      	ldrb	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	7979      	ldrb	r1, [r7, #5]
 8001d22:	793b      	ldrb	r3, [r7, #4]
 8001d24:	1acb      	subs	r3, r1, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	73bb      	strb	r3, [r7, #14]
        data <<= (bitStart - length + 1); // shift data into correct position
 8001d30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d34:	7979      	ldrb	r1, [r7, #5]
 8001d36:	793b      	ldrb	r3, [r7, #4]
 8001d38:	1acb      	subs	r3, r1, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	f887 3020 	strb.w	r3, [r7, #32]
        data &= mask; // zero all non-important bits in data
 8001d44:	7bba      	ldrb	r2, [r7, #14]
 8001d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~(mask); // zero all important bits in existing byte
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	73fb      	strb	r3, [r7, #15]
        b |= data; // combine data with existing byte
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
        return writeByte(devAddr, regAddr, b);
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	79b9      	ldrb	r1, [r7, #6]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f80a 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	e000      	b.n	8001d82 <_ZN6I2Cdev9writeBitsEhhhhh+0xaa>
    } else {
        return false;
 8001d80:	2300      	movs	r3, #0
    }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	717b      	strb	r3, [r7, #5]
    return writeBytes(devAddr, regAddr, 1, &data);
 8001da2:	1d7b      	adds	r3, r7, #5
 8001da4:	79b9      	ldrb	r1, [r7, #6]
 8001da6:	79f8      	ldrb	r0, [r7, #7]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f000 f821 	bl	8001df0 <_ZN6I2Cdev10writeBytesEhhhPh>
 8001dae:	4603      	mov	r3, r0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN6I2Cdev9writeWordEhht>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	80bb      	strh	r3, [r7, #4]
	uint8_t buffor[2];
	buffor[0] = (uint8_t)(data>>8);
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	121b      	asrs	r3, r3, #8
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	733b      	strb	r3, [r7, #12]
	buffor[1] = (uint8_t)data;
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	737b      	strb	r3, [r7, #13]
    return writeBytes(devAddr, regAddr, 2, buffor);
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	79b9      	ldrb	r1, [r7, #6]
 8001dde:	79f8      	ldrb	r0, [r7, #7]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f000 f805 	bl	8001df0 <_ZN6I2Cdev10writeBytesEhhhPh>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
		uint8_t *data) {
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	71bb      	strb	r3, [r7, #6]
 8001e00:	4613      	mov	r3, r2
 8001e02:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Write(hi2c, devAddr, regAddr, 1, data, length,
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <_ZN6I2Cdev10writeBytesEhhhPh+0x50>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	b29c      	uxth	r4, r3
 8001e10:	797b      	ldrb	r3, [r7, #5]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <_ZN6I2Cdev10writeBytesEhhhPh+0x54>)
 8001e16:	8812      	ldrh	r2, [r2, #0]
 8001e18:	9202      	str	r2, [sp, #8]
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	4622      	mov	r2, r4
 8001e24:	f003 fa44 	bl	80052b0 <HAL_I2C_Mem_Write>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
			readTimeout);
	return status == HAL_OK;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
	 #if (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)
	 status = Wire.endTransmission();
	 #endif
	 return status == 0;
	 */
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	200001e8 	.word	0x200001e8
 8001e44:	20000000 	.word	0x20000000

08001e48 <_ZN14DigitalLED_RGB4On_REv>:

	inline void On_R(){ HAL_GPIO_WritePin(GPIOx_R, GPIO_Pin_R, inverse ? GPIO_PIN_SET: GPIO_PIN_RESET); }
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8999      	ldrh	r1, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7c9b      	ldrb	r3, [r3, #18]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <_ZN14DigitalLED_RGB4On_REv+0x1c>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <_ZN14DigitalLED_RGB4On_REv+0x1e>
 8001e64:	2300      	movs	r3, #0
 8001e66:	461a      	mov	r2, r3
 8001e68:	f003 f8ca 	bl	8005000 <HAL_GPIO_WritePin>
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_ZN14DigitalLED_RGB4On_GEv>:
	inline void On_G(){ HAL_GPIO_WritePin(GPIOx_G, GPIO_Pin_G, inverse ? GPIO_PIN_SET: GPIO_PIN_RESET); }
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6858      	ldr	r0, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	89d9      	ldrh	r1, [r3, #14]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7c9b      	ldrb	r3, [r3, #18]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_ZN14DigitalLED_RGB4On_GEv+0x1c>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <_ZN14DigitalLED_RGB4On_GEv+0x1e>
 8001e90:	2300      	movs	r3, #0
 8001e92:	461a      	mov	r2, r3
 8001e94:	f003 f8b4 	bl	8005000 <HAL_GPIO_WritePin>
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZN14DigitalLED_RGB4On_BEv>:
	inline void On_B(){ HAL_GPIO_WritePin(GPIOx_B, GPIO_Pin_B, inverse ? GPIO_PIN_SET: GPIO_PIN_RESET); }
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6898      	ldr	r0, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8a19      	ldrh	r1, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7c9b      	ldrb	r3, [r3, #18]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZN14DigitalLED_RGB4On_BEv+0x1c>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <_ZN14DigitalLED_RGB4On_BEv+0x1e>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f003 f89e 	bl	8005000 <HAL_GPIO_WritePin>
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN14DigitalLED_RGB5Off_REv>:
	void On();
	void On(bool r, bool g, bool b);

	inline void Off_R(){ HAL_GPIO_WritePin(GPIOx_R, GPIO_Pin_R, inverse ? GPIO_PIN_RESET: GPIO_PIN_SET); }
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8999      	ldrh	r1, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7c9b      	ldrb	r3, [r3, #18]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <_ZN14DigitalLED_RGB5Off_REv+0x1c>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e000      	b.n	8001eea <_ZN14DigitalLED_RGB5Off_REv+0x1e>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	461a      	mov	r2, r3
 8001eec:	f003 f888 	bl	8005000 <HAL_GPIO_WritePin>
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_ZN14DigitalLED_RGB5Off_GEv>:
	inline void Off_G(){ HAL_GPIO_WritePin(GPIOx_G, GPIO_Pin_G, inverse ? GPIO_PIN_RESET: GPIO_PIN_SET); }
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6858      	ldr	r0, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	89d9      	ldrh	r1, [r3, #14]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7c9b      	ldrb	r3, [r3, #18]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZN14DigitalLED_RGB5Off_GEv+0x1c>
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <_ZN14DigitalLED_RGB5Off_GEv+0x1e>
 8001f14:	2301      	movs	r3, #1
 8001f16:	461a      	mov	r2, r3
 8001f18:	f003 f872 	bl	8005000 <HAL_GPIO_WritePin>
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZN14DigitalLED_RGB5Off_BEv>:
	inline void Off_B(){ HAL_GPIO_WritePin(GPIOx_B, GPIO_Pin_B, inverse ? GPIO_PIN_RESET: GPIO_PIN_SET); }
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6898      	ldr	r0, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8a19      	ldrh	r1, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7c9b      	ldrb	r3, [r3, #18]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_ZN14DigitalLED_RGB5Off_BEv+0x1c>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <_ZN14DigitalLED_RGB5Off_BEv+0x1e>
 8001f40:	2301      	movs	r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	f003 f85c 	bl	8005000 <HAL_GPIO_WritePin>
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZN14DigitalLED_RGB8Toggle_REv>:
	void Off();

	inline void Toggle_R(){ HAL_GPIO_TogglePin(GPIOx_R, GPIO_Pin_R); }
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	899b      	ldrh	r3, [r3, #12]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f003 f864 	bl	8005030 <HAL_GPIO_TogglePin>
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN14DigitalLED_RGB8Toggle_GEv>:
	inline void Toggle_G(){ HAL_GPIO_TogglePin(GPIOx_G, GPIO_Pin_G); }
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	89db      	ldrh	r3, [r3, #14]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f003 f854 	bl	8005030 <HAL_GPIO_TogglePin>
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_ZN14DigitalLED_RGB8Toggle_BEv>:
	inline void Toggle_B(){ HAL_GPIO_TogglePin(GPIOx_B, GPIO_Pin_B); }
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8a1b      	ldrh	r3, [r3, #16]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f003 f844 	bl	8005030 <HAL_GPIO_TogglePin>
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN14DigitalLED_RGB2OnEbbb>:
	On_R();
	On_G();
	On_B();
}

void DigitalLED_RGB::On(bool r, bool g, bool b) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	70fb      	strb	r3, [r7, #3]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70bb      	strb	r3, [r7, #2]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	707b      	strb	r3, [r7, #1]
	r ? On_R() : Off_R();
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <_ZN14DigitalLED_RGB2OnEbbb+0x28>
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff39 	bl	8001e48 <_ZN14DigitalLED_RGB4On_REv>
 8001fd6:	e002      	b.n	8001fde <_ZN14DigitalLED_RGB2OnEbbb+0x2e>
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff77 	bl	8001ecc <_ZN14DigitalLED_RGB5Off_REv>
	g ? On_G() : Off_G();
 8001fde:	78bb      	ldrb	r3, [r7, #2]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <_ZN14DigitalLED_RGB2OnEbbb+0x3c>
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff45 	bl	8001e74 <_ZN14DigitalLED_RGB4On_GEv>
 8001fea:	e002      	b.n	8001ff2 <_ZN14DigitalLED_RGB2OnEbbb+0x42>
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff83 	bl	8001ef8 <_ZN14DigitalLED_RGB5Off_GEv>
	b ? On_B() : Off_B();
 8001ff2:	787b      	ldrb	r3, [r7, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <_ZN14DigitalLED_RGB2OnEbbb+0x50>
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff51 	bl	8001ea0 <_ZN14DigitalLED_RGB4On_BEv>
}
 8001ffe:	e002      	b.n	8002006 <_ZN14DigitalLED_RGB2OnEbbb+0x56>
	b ? On_B() : Off_B();
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff8f 	bl	8001f24 <_ZN14DigitalLED_RGB5Off_BEv>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN14DigitalLED_RGB3OffEv>:

void DigitalLED_RGB::Off() {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	Off_R();
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ff58 	bl	8001ecc <_ZN14DigitalLED_RGB5Off_REv>
	Off_G();
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff6b 	bl	8001ef8 <_ZN14DigitalLED_RGB5Off_GEv>
	Off_B();
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff7e 	bl	8001f24 <_ZN14DigitalLED_RGB5Off_BEv>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZN14DigitalLED_RGB6ToggleEv>:

void DigitalLED_RGB::Toggle() {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	Toggle_R();
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff89 	bl	8001f50 <_ZN14DigitalLED_RGB8Toggle_REv>
	Toggle_G();
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff96 	bl	8001f70 <_ZN14DigitalLED_RGB8Toggle_GEv>
	Toggle_B();
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ffa3 	bl	8001f90 <_ZN14DigitalLED_RGB8Toggle_BEv>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_ZN10ServoMotor4InitEP17TIM_HandleTypeDefmmmb>:
#include "MOTOR.h"


/// ServoMotor

void ServoMotor::Init(TIM_HandleTypeDef *_htim, uint32_t _channel, uint32_t _angle_min, uint32_t _angle_max, bool _mode){
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]

	htim = _htim;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	601a      	str	r2, [r3, #0]
	channel = _channel;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	605a      	str	r2, [r3, #4]

	angle_min = _angle_min;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	60da      	str	r2, [r3, #12]
	angle_max = _angle_max;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	611a      	str	r2, [r3, #16]

	pwm_min = 1000;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207e:	615a      	str	r2, [r3, #20]
	pwm_max = 2000;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002086:	619a      	str	r2, [r3, #24]

	mode = _mode;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	7f3a      	ldrb	r2, [r7, #28]
 800208c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	HAL_TIM_PWM_Start(htim, channel);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f004 fcc6 	bl	8006a2c <HAL_TIM_PWM_Start>

	SetNormal();
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f8f1 	bl	8002288 <_ZN10ServoMotor9SetNormalEv>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <_ZN10ServoMotor8SetAngleEm>:

void ServoMotor::SetAngle(uint32_t angle){
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

	if(angle>angle_max)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d902      	bls.n	80020ca <_ZN10ServoMotor8SetAngleEm+0x1a>
		angle = angle_max;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	603b      	str	r3, [r7, #0]
	if(angle<angle_min)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d202      	bcs.n	80020da <_ZN10ServoMotor8SetAngleEm+0x2a>
		angle = angle_min;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	603b      	str	r3, [r7, #0]

	double step = double(pwm_max-pwm_min)/double(angle_max-angle_min);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe f975 	bl	80003d4 <__aeabi_ui2d>
 80020ea:	4604      	mov	r4, r0
 80020ec:	460d      	mov	r5, r1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f96b 	bl	80003d4 <__aeabi_ui2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f7fe fb09 	bl	800071c <__aeabi_ddiv>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if(mode)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02a      	beq.n	8002172 <_ZN10ServoMotor8SetAngleEm+0xc2>
		pwm = uint32_t(pwm_min + (angle-angle_min)*step+0.5);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f957 	bl	80003d4 <__aeabi_ui2d>
 8002126:	4604      	mov	r4, r0
 8002128:	460d      	mov	r5, r1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f94e 	bl	80003d4 <__aeabi_ui2d>
 8002138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213c:	f7fe f9c4 	bl	80004c8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4620      	mov	r0, r4
 8002146:	4629      	mov	r1, r5
 8002148:	f7fe f808 	bl	800015c <__adddf3>
 800214c:	4603      	mov	r3, r0
 800214e:	460c      	mov	r4, r1
 8002150:	4618      	mov	r0, r3
 8002152:	4621      	mov	r1, r4
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <_ZN10ServoMotor8SetAngleEm+0x16c>)
 800215a:	f7fd ffff 	bl	800015c <__adddf3>
 800215e:	4603      	mov	r3, r0
 8002160:	460c      	mov	r4, r1
 8002162:	4618      	mov	r0, r3
 8002164:	4621      	mov	r1, r4
 8002166:	f7fe fbc1 	bl	80008ec <__aeabi_d2uiz>
 800216a:	4602      	mov	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002170:	e029      	b.n	80021c6 <_ZN10ServoMotor8SetAngleEm+0x116>
	else
		pwm = uint32_t(pwm_max - (angle-angle_min)*step-0.5);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f92c 	bl	80003d4 <__aeabi_ui2d>
 800217c:	4604      	mov	r4, r0
 800217e:	460d      	mov	r5, r1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f923 	bl	80003d4 <__aeabi_ui2d>
 800218e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002192:	f7fe f999 	bl	80004c8 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4620      	mov	r0, r4
 800219c:	4629      	mov	r1, r5
 800219e:	f7fd ffdb 	bl	8000158 <__aeabi_dsub>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	4618      	mov	r0, r3
 80021a8:	4621      	mov	r1, r4
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <_ZN10ServoMotor8SetAngleEm+0x16c>)
 80021b0:	f7fd ffd2 	bl	8000158 <__aeabi_dsub>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	4618      	mov	r0, r3
 80021ba:	4621      	mov	r1, r4
 80021bc:	f7fe fb96 	bl	80008ec <__aeabi_d2uiz>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c

	__HAL_TIM_SET_COMPARE(htim, channel, pwm);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <_ZN10ServoMotor8SetAngleEm+0x12c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021da:	e01b      	b.n	8002214 <_ZN10ServoMotor8SetAngleEm+0x164>
	__HAL_TIM_SET_COMPARE(htim, channel, pwm);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d106      	bne.n	80021f2 <_ZN10ServoMotor8SetAngleEm+0x142>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021f0:	e010      	b.n	8002214 <_ZN10ServoMotor8SetAngleEm+0x164>
	__HAL_TIM_SET_COMPARE(htim, channel, pwm);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d106      	bne.n	8002208 <_ZN10ServoMotor8SetAngleEm+0x158>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002206:	e005      	b.n	8002214 <_ZN10ServoMotor8SetAngleEm+0x164>
	__HAL_TIM_SET_COMPARE(htim, channel, pwm);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bdb0      	pop	{r4, r5, r7, pc}
 800221c:	3fe00000 	.word	0x3fe00000

08002220 <_ZN10ServoMotor15SetAngleProcentEm>:

void ServoMotor::SetAngleProcent(uint32_t procent){
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

	uint32_t power = procent;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	61fb      	str	r3, [r7, #28]
	if(power<0)
		power = 0;
	if(power>100)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <_ZN10ServoMotor15SetAngleProcentEm+0x18>
		power = 100;
 8002234:	2364      	movs	r3, #100	; 0x64
 8002236:	61fb      	str	r3, [r7, #28]

	double step = 1.8;
 8002238:	a411      	add	r4, pc, #68	; (adr r4, 8002280 <_ZN10ServoMotor15SetAngleProcentEm+0x60>)
 800223a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800223e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double result = step*power;
 8002242:	69f8      	ldr	r0, [r7, #28]
 8002244:	f7fe f8c6 	bl	80003d4 <__aeabi_ui2d>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	461a      	mov	r2, r3
 800224e:	4623      	mov	r3, r4
 8002250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002254:	f7fe f938 	bl	80004c8 <__aeabi_dmul>
 8002258:	4603      	mov	r3, r0
 800225a:	460c      	mov	r4, r1
 800225c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	SetAngle(result);
 8002260:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002264:	f7fe fb42 	bl	80008ec <__aeabi_d2uiz>
 8002268:	4603      	mov	r3, r0
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff1f 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>
}
 8002272:	bf00      	nop
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
 800227a:	bf00      	nop
 800227c:	f3af 8000 	nop.w
 8002280:	cccccccd 	.word	0xcccccccd
 8002284:	3ffccccc 	.word	0x3ffccccc

08002288 <_ZN10ServoMotor9SetNormalEv>:

void ServoMotor::SetNormal(){
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

	SetAngle(uint32_t((angle_max-angle_min)/2)+0.5);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f899 	bl	80003d4 <__aeabi_ui2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <_ZN10ServoMotor9SetNormalEv+0x44>)
 80022a8:	f7fd ff58 	bl	800015c <__adddf3>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	4618      	mov	r0, r3
 80022b2:	4621      	mov	r1, r4
 80022b4:	f7fe fb1a 	bl	80008ec <__aeabi_d2uiz>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fef7 	bl	80020b0 <_ZN10ServoMotor8SetAngleEm>
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	3fe00000 	.word	0x3fe00000

080022d0 <_ZN10ServoMotor10PwmClarifyEmm>:
void ServoMotor::ChangeMode(){

	mode = !mode;
}

void ServoMotor::PwmClarify(uint32_t _pwm_min, uint32_t _pwm_max){
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]

	pwm_min = _pwm_min;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	615a      	str	r2, [r3, #20]
	pwm_max = _pwm_max;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_ZN7DCMotor4InitEP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_tb>:

/// DCMotor

void DCMotor::Init(TIM_HandleTypeDef *_htim,  uint32_t _channel,
			  GPIO_TypeDef *_GPIOx_Dir1, uint16_t _GPIO_Pin_Dir1,
			  GPIO_TypeDef *_GPIOx_Dir2, uint16_t _GPIO_Pin_Dir2, bool _mode){
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]

	htim = _htim;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	601a      	str	r2, [r3, #0]
	channel = _channel;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	605a      	str	r2, [r3, #4]
	period = htim->Init.Period;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]

	GPIOx_Dir1 = _GPIOx_Dir1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	60da      	str	r2, [r3, #12]
	GPIO_Pin_Dir1 = _GPIO_Pin_Dir1;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8b3a      	ldrh	r2, [r7, #24]
 8002320:	829a      	strh	r2, [r3, #20]

	GPIOx_Dir2 = _GPIOx_Dir2;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	611a      	str	r2, [r3, #16]
	GPIO_Pin_Dir2 = _GPIO_Pin_Dir2;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8c3a      	ldrh	r2, [r7, #32]
 800232c:	82da      	strh	r2, [r3, #22]

	mode = _mode;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002334:	761a      	strb	r2, [r3, #24]
	currentMode = _mode;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800233c:	765a      	strb	r2, [r3, #25]

	currentValue = 0;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	76da      	strb	r2, [r3, #27]

	HAL_TIM_PWM_Start(htim, channel);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f004 fb6c 	bl	8006a2c <HAL_TIM_PWM_Start>

	Off();
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f820 	bl	800239a <_ZN7DCMotor3OffEv>
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_ZN7DCMotor8SetValueEh>:

void DCMotor::SetValue(uint8_t _value){
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	70fb      	strb	r3, [r7, #3]

	value = _value;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	769a      	strb	r2, [r3, #26]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <_ZN7DCMotor12SetDirectionEb>:
void DCMotor:: ChangeDirection(){

	mode = !mode;
}

void DCMotor:: SetDirection(bool direction){
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]

	mode = direction;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <_ZN7DCMotor3OffEv>:

void DCMotor::Off(){
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOx_Dir1, GPIO_Pin_Dir1, GPIO_PIN_RESET);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68d8      	ldr	r0, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8a9b      	ldrh	r3, [r3, #20]
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	f002 fe27 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx_Dir2, GPIO_Pin_Dir2, GPIO_PIN_RESET);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6918      	ldr	r0, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8adb      	ldrh	r3, [r3, #22]
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	f002 fe1f 	bl	8005000 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(htim, channel, 0);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <_ZN7DCMotor3OffEv+0x3c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023d4:	e018      	b.n	8002408 <_ZN7DCMotor3OffEv+0x6e>
	__HAL_TIM_SET_COMPARE(htim, channel, 0);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d105      	bne.n	80023ea <_ZN7DCMotor3OffEv+0x50>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023e8:	e00e      	b.n	8002408 <_ZN7DCMotor3OffEv+0x6e>
	__HAL_TIM_SET_COMPARE(htim, channel, 0);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d105      	bne.n	80023fe <_ZN7DCMotor3OffEv+0x64>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023fc:	e004      	b.n	8002408 <_ZN7DCMotor3OffEv+0x6e>
	__HAL_TIM_SET_COMPARE(htim, channel, 0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN7Encoder4InitEP17TIM_HandleTypeDefmm>:
}


// Encoder

void Encoder::Init(TIM_HandleTypeDef *_htim, uint32_t first_channel, uint32_t _max_impulse){
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]

	htim = _htim;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	601a      	str	r2, [r3, #0]
	channel = first_channel;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	605a      	str	r2, [r3, #4]
	max_impulse = _max_impulse;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	609a      	str	r2, [r3, #8]
	max_impulse--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]

	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	213c      	movs	r1, #60	; 0x3c
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fbb3 	bl	8006bac <HAL_TIM_Encoder_Start>
	htim -> Instance->ARR = max_impulse;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZN7MPU6050C1Ev>:
#include <MPU6050.h>
#include <cstdlib>
#include <cstring>


MPU6050::MPU6050() {
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	22d0      	movs	r2, #208	; 0xd0
 8002466:	701a      	strb	r2, [r3, #0]
    accelScale = 0x00;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	73da      	strb	r2, [r3, #15]
    gyroScale = 0x00;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	741a      	strb	r2, [r3, #16]
}
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <_ZN7MPU605010initializeEv>:
    devAddr = address;
    accelScale = 0x00;
    gyroScale = 0x00;
}

void MPU6050::initialize() {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8002488:	2101      	movs	r1, #1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f95b 	bl	8002746 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroscopeRange(MPU6050_GYRO_FS_250);
 8002490:	2100      	movs	r1, #0
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f843 	bl	800251e <_ZN7MPU605026setFullScaleGyroscopeRangeEh>
    setFullScaleAccelerationRange(MPU6050_ACCEL_FS_2);
 8002498:	2100      	movs	r1, #0
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f855 	bl	800254a <_ZN7MPU605029setFullScaleAccelerationRangeEh>
    setSleepEnabled(false);
 80024a0:	2100      	movs	r1, #0
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f91c 	bl	80026e0 <_ZN7MPU605015setSleepEnabledEb>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_ZN7MPU60507setRateEh>:
uint8_t MPU6050::getRate() {
    I2Cdev::readByte(devAddr, MPU6050_RA_SMPLRT_DIV, buffer);
    return buffer[0];
}

void MPU6050::setRate(uint8_t rate) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	2119      	movs	r1, #25
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fc63 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN7MPU605020setExternalFrameSyncEh>:

void MPU6050::setExternalFrameSync(uint8_t sync) {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7818      	ldrb	r0, [r3, #0]
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2303      	movs	r3, #3
 80024e8:	2205      	movs	r2, #5
 80024ea:	211a      	movs	r1, #26
 80024ec:	f7ff fbf4 	bl	8001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_ZN7MPU605011setDLPFModeEh>:

void MPU6050::setDLPFMode(uint8_t mode) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7818      	ldrb	r0, [r3, #0]
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2303      	movs	r3, #3
 800250e:	2202      	movs	r2, #2
 8002510:	211a      	movs	r1, #26
 8002512:	f7ff fbe1 	bl	8001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZN7MPU605026setFullScaleGyroscopeRangeEh>:

void MPU6050::setFullScaleGyroscopeRange(uint8_t range) {
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af02      	add	r7, sp, #8
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7818      	ldrb	r0, [r3, #0]
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2302      	movs	r3, #2
 8002534:	2204      	movs	r2, #4
 8002536:	211b      	movs	r1, #27
 8002538:	f7ff fbce 	bl	8001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>
    gyroScale = range;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	741a      	strb	r2, [r3, #16]
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_ZN7MPU605029setFullScaleAccelerationRangeEh>:

void MPU6050::setFullScaleAccelerationRange(uint8_t range) {
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af02      	add	r7, sp, #8
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7818      	ldrb	r0, [r3, #0]
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2302      	movs	r3, #2
 8002560:	2204      	movs	r2, #4
 8002562:	211c      	movs	r1, #28
 8002564:	f7ff fbb8 	bl	8001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>
    accelScale = range;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	73da      	strb	r2, [r3, #15]
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_ZN7MPU605027setMotionDetectionThresholdEh>:

void MPU6050::setFreefallDetectionDuration(uint8_t duration) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_FF_DUR, duration);
}

void MPU6050::setMotionDetectionThreshold(uint8_t threshold) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	211f      	movs	r1, #31
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fc00 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_ZN7MPU605026setMotionDetectionDurationEh>:

void MPU6050::setMotionDetectionDuration(uint8_t duration) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	2120      	movs	r1, #32
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fbef 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_ZN7MPU605031setZeroMotionDetectionThresholdEh>:

void MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	2121      	movs	r1, #33	; 0x21
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fbde 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZN7MPU605030setZeroMotionDetectionDurationEh>:

void MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	2122      	movs	r1, #34	; 0x22
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fbcd 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZN7MPU605015setSlaveAddressEhh>:

void MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
 800260a:	4613      	mov	r3, r2
 800260c:	70bb      	strb	r3, [r7, #2]
    if (num > 3) return;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d80d      	bhi.n	8002630 <_ZN7MPU605015setSlaveAddressEhh+0x32>
    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7818      	ldrb	r0, [r3, #0]
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	461a      	mov	r2, r3
 800261c:	0052      	lsls	r2, r2, #1
 800261e:	4413      	add	r3, r2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3325      	adds	r3, #37	; 0x25
 8002624:	b2db      	uxtb	r3, r3
 8002626:	78ba      	ldrb	r2, [r7, #2]
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff fbb1 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
 800262e:	e000      	b.n	8002632 <_ZN7MPU605015setSlaveAddressEhh+0x34>
    if (num > 3) return;
 8002630:	bf00      	nop
}
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_ZN7MPU605012getIntStatusEv>:

uint8_t MPU6050::getIntStatus() {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7818      	ldrb	r0, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <_ZN7MPU605012getIntStatusEv+0x28>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	213a      	movs	r1, #58	; 0x3a
 800264e:	f7ff fabf 	bl	8001bd0 <_ZN6I2Cdev8readByteEhhPht>
    return buffer[0];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	785b      	ldrb	r3, [r3, #1]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000

08002664 <_ZN7MPU605013setIntEnabledEh>:

void MPU6050::setIntEnabled(uint8_t enabled) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	2138      	movs	r1, #56	; 0x38
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fb89 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_ZN7MPU60505resetEv>:
bool MPU6050::getZeroMotionDetected() {
    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZRMOT_BIT, buffer);
    return buffer[0];
}

void MPU6050::reset() {
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7818      	ldrb	r0, [r3, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	2207      	movs	r2, #7
 8002696:	216b      	movs	r1, #107	; 0x6b
 8002698:	f7ff fade 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_ZN7MPU60509resetFIFOEv>:

void MPU6050::resetFIFO() {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7818      	ldrb	r0, [r3, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	2202      	movs	r2, #2
 80026b4:	216a      	movs	r1, #106	; 0x6a
 80026b6:	f7ff facf 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_ZN7MPU605014resetI2CMasterEv>:

void MPU6050::resetI2CMaster() {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7818      	ldrb	r0, [r3, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	2201      	movs	r2, #1
 80026d2:	216a      	movs	r1, #106	; 0x6a
 80026d4:	f7ff fac0 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN7MPU605015setSleepEnabledEb>:

void MPU6050::resetSensors() {
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_SIG_COND_RESET_BIT, true);
}

void MPU6050::setSleepEnabled(bool enabled) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7818      	ldrb	r0, [r3, #0]
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	2206      	movs	r2, #6
 80026f4:	216b      	movs	r1, #107	; 0x6b
 80026f6:	f7ff faaf 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZN7MPU605014setFIFOEnabledEb>:

void MPU6050::setFIFOEnabled(bool enabled) {
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7818      	ldrb	r0, [r3, #0]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	2206      	movs	r2, #6
 8002716:	216a      	movs	r1, #106	; 0x6a
 8002718:	f7ff fa9e 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_ZN7MPU605023setI2CMasterModeEnabledEb>:

void MPU6050::setI2CMasterModeEnabled(bool enabled) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7818      	ldrb	r0, [r3, #0]
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	2205      	movs	r2, #5
 8002738:	216a      	movs	r1, #106	; 0x6a
 800273a:	f7ff fa8d 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZN7MPU605014setClockSourceEh>:

void MPU6050::setClockSource(uint8_t source) {
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af02      	add	r7, sp, #8
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7818      	ldrb	r0, [r3, #0]
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2303      	movs	r3, #3
 800275c:	2202      	movs	r2, #2
 800275e:	216b      	movs	r1, #107	; 0x6b
 8002760:	f7ff faba 	bl	8001cd8 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZN7MPU605015setOTPBankValidEb>:

void MPU6050::setOTPBankValid(bool enabled) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7818      	ldrb	r0, [r3, #0]
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	f7ff fa69 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <_ZN7MPU605012getFIFOCountEv>:

uint16_t MPU6050::getFIFOCount() {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7818      	ldrb	r0, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <_ZN7MPU605012getFIFOCountEv+0x3c>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	2202      	movs	r2, #2
 80027aa:	2172      	movs	r1, #114	; 0x72
 80027ac:	f7ff fa28 	bl	8001c00 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b21a      	sxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	b29b      	uxth	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000000 	.word	0x20000000

080027d0 <_ZN7MPU605012getFIFOBytesEPhh>:
uint8_t MPU6050::getFIFOByte() {
    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);
    return buffer[0];
}

void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
    if(length > 0){
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <_ZN7MPU605012getFIFOBytesEPhh+0x2a>
        I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	7818      	ldrb	r0, [r3, #0]
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <_ZN7MPU605012getFIFOBytesEPhh+0x38>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2174      	movs	r1, #116	; 0x74
 80027f4:	f7ff fa04 	bl	8001c00 <_ZN6I2Cdev9readBytesEhhhPht>
    } else {
    	*data = 0;
    }
}
 80027f8:	e002      	b.n	8002800 <_ZN7MPU605012getFIFOBytesEPhh+0x30>
    	*data = 0;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000000 	.word	0x20000000

0800280c <_ZN7MPU605022setXAccelerationOffsetEs>:

void MPU6050::setDeviceID(uint8_t id) {
    I2Cdev::writeBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, id);
}

void MPU6050::setXAccelerationOffset(int16_t offset) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	2106      	movs	r1, #6
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fac9 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN7MPU605022setYAccelerationOffsetEs>:

void MPU6050::setYAccelerationOffset(int16_t offset) {
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	2108      	movs	r1, #8
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fab8 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN7MPU605022setZAccelerationOffsetEs>:

void MPU6050::setZAccelerationOffset(int16_t offset) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	210a      	movs	r1, #10
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff faa7 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN7MPU605019setXGyroscopeOffsetEs>:

void MPU6050::setXGyroscopeOffset(int16_t offset) {
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	2113      	movs	r1, #19
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fa96 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN7MPU605019setYGyroscopeOffsetEs>:

void MPU6050::setYGyroscopeOffset(int16_t offset) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	887a      	ldrh	r2, [r7, #2]
 80028a6:	2115      	movs	r1, #21
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fa85 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_ZN7MPU605019setZGyroscopeOffsetEs>:

void MPU6050::setZGyroscopeOffset(int16_t offset) {
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	807b      	strh	r3, [r7, #2]
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	2117      	movs	r1, #23
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fa74 	bl	8001db8 <_ZN6I2Cdev9writeWordEhht>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZN7MPU605013setDMPEnabledEb>:
bool MPU6050::getIntDMPStatus() {
    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);
    return buffer[0];
}

void MPU6050::setDMPEnabled(bool enabled) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7818      	ldrb	r0, [r3, #0]
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	2207      	movs	r2, #7
 80028ec:	216a      	movs	r1, #106	; 0x6a
 80028ee:	f7ff f9b3 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_ZN7MPU60508resetDMPEv>:

void MPU6050::resetDMP() {
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7818      	ldrb	r0, [r3, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	216a      	movs	r1, #106	; 0x6a
 800290c:	f7ff f9a4 	bl	8001c58 <_ZN6I2Cdev8writeBitEhhhh>
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZN7MPU605013setMemoryBankEhbb>:

void MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	70fb      	strb	r3, [r7, #3]
 800292a:	460b      	mov	r3, r1
 800292c:	70bb      	strb	r3, [r7, #2]
 800292e:	4613      	mov	r3, r2
 8002930:	707b      	strb	r3, [r7, #1]
    bank &= 0x1F;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	70fb      	strb	r3, [r7, #3]
    if (userBank) bank |= 0x20;
 800293a:	787b      	ldrb	r3, [r7, #1]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <_ZN7MPU605013setMemoryBankEhbb+0x30>
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	70fb      	strb	r3, [r7, #3]
    if (prefetchEnabled) bank |= 0x40;
 8002948:	78bb      	ldrb	r3, [r7, #2]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <_ZN7MPU605013setMemoryBankEhbb+0x3e>
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	216d      	movs	r1, #109	; 0x6d
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fa16 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZN7MPU605021setMemoryStartAddressEh>:

void MPU6050::setMemoryStartAddress(uint8_t address) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	216e      	movs	r1, #110	; 0x6e
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fa05 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <_ZN7MPU605015readMemoryBlockEPhthh>:

void MPU6050::writeMemoryByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);
}

void MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	460b      	mov	r3, r1
 80029a0:	80fb      	strh	r3, [r7, #6]
 80029a2:	4613      	mov	r3, r2
 80029a4:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 80029a6:	7979      	ldrb	r1, [r7, #5]
 80029a8:	2300      	movs	r3, #0
 80029aa:	2200      	movs	r2, #0
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ffb3 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 80029b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ffd7 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    for (uint16_t i = 0; i < dataSize;) {
 80029be:	2300      	movs	r3, #0
 80029c0:	82bb      	strh	r3, [r7, #20]
 80029c2:	8aba      	ldrh	r2, [r7, #20]
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d248      	bcs.n	8002a5c <_ZN7MPU605015readMemoryBlockEPhthh+0xcc>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80029ca:	2310      	movs	r3, #16
 80029cc:	75fb      	strb	r3, [r7, #23]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 80029ce:	8aba      	ldrh	r2, [r7, #20]
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	441a      	add	r2, r3
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dd05      	ble.n	80029e6 <_ZN7MPU605015readMemoryBlockEPhthh+0x56>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8abb      	ldrh	r3, [r7, #20]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	75fb      	strb	r3, [r7, #23]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 80029e6:	7dfa      	ldrb	r2, [r7, #23]
 80029e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029ec:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dd03      	ble.n	80029fc <_ZN7MPU605015readMemoryBlockEPhthh+0x6c>
 80029f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029f8:	425b      	negs	r3, r3
 80029fa:	75fb      	strb	r3, [r7, #23]

        // read the chunk of data as specified
        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7818      	ldrb	r0, [r3, #0]
 8002a00:	8abb      	ldrh	r3, [r7, #20]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	18d1      	adds	r1, r2, r3
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <_ZN7MPU605015readMemoryBlockEPhthh+0xd4>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	7dfa      	ldrb	r2, [r7, #23]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	216f      	movs	r1, #111	; 0x6f
 8002a12:	f7ff f8f5 	bl	8001c00 <_ZN6I2Cdev9readBytesEhhhPht>

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	8abb      	ldrh	r3, [r7, #20]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	82bb      	strh	r3, [r7, #20]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002a20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	4413      	add	r3, r2
 8002a28:	f887 3020 	strb.w	r3, [r7, #32]

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002a2c:	8aba      	ldrh	r2, [r7, #20]
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d2c6      	bcs.n	80029c2 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
            if (address == 0) bank++;
 8002a34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_ZN7MPU605015readMemoryBlockEPhthh+0xb2>
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002a42:	7979      	ldrb	r1, [r7, #5]
 8002a44:	2300      	movs	r3, #0
 8002a46:	2200      	movs	r2, #0
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff ff65 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002a4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a52:	4619      	mov	r1, r3
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff89 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
    for (uint16_t i = 0; i < dataSize;) {
 8002a5a:	e7b2      	b.n	80029c2 <_ZN7MPU605015readMemoryBlockEPhthh+0x32>
        }
    }
}
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000000 	.word	0x20000000

08002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>:

bool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	460b      	mov	r3, r1
 8002a78:	80fb      	strh	r3, [r7, #6]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	717b      	strb	r3, [r7, #5]
    setMemoryBank(bank);
 8002a7e:	7979      	ldrb	r1, [r7, #5]
 8002a80:	2300      	movs	r3, #0
 8002a82:	2200      	movs	r2, #0
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff ff47 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(address);
 8002a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ff6b 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
    uint8_t chunkSize;
    uint8_t *verifyBuffer;
    uint8_t *progBuffer=0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
    uint16_t i;
    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x44>
 8002aa2:	2010      	movs	r0, #16
 8002aa4:	f005 face 	bl	8008044 <malloc>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dataSize;) {
 8002aac:	2300      	movs	r3, #0
 8002aae:	82fb      	strh	r3, [r7, #22]
 8002ab0:	8afa      	ldrh	r2, [r7, #22]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d271      	bcs.n	8002b9c <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x134>
        // determine correct chunk size according to bank position and data size
        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002ab8:	2310      	movs	r3, #16
 8002aba:	77fb      	strb	r3, [r7, #31]

        // make sure we don't go past the data size
        if (i + chunkSize > dataSize) chunkSize = dataSize - i;
 8002abc:	8afa      	ldrh	r2, [r7, #22]
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dd05      	ble.n	8002ad4 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x6c>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	8afb      	ldrh	r3, [r7, #22]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	77fb      	strb	r3, [r7, #31]

        // make sure this chunk doesn't go past the bank boundary (256 bytes)
        if (chunkSize > 256 - address) chunkSize = 256 - address;
 8002ad4:	7ffa      	ldrb	r2, [r7, #31]
 8002ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ada:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dd03      	ble.n	8002aea <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x82>
 8002ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ae6:	425b      	negs	r3, r3
 8002ae8:	77fb      	strb	r3, [r7, #31]

        // write the chunk of data as specified
        progBuffer = (uint8_t *)data + i;
 8002aea:	8afb      	ldrh	r3, [r7, #22]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4413      	add	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]

        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	7818      	ldrb	r0, [r3, #0]
 8002af6:	7ffa      	ldrb	r2, [r7, #31]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	216f      	movs	r1, #111	; 0x6f
 8002afc:	f7ff f978 	bl	8001df0 <_ZN6I2Cdev10writeBytesEhhhPh>

        // verify data if needed
        if (verify && verifyBuffer) {
 8002b00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d026      	beq.n	8002b56 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0xee>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d023      	beq.n	8002b56 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0xee>
            setMemoryBank(bank);
 8002b0e:	7979      	ldrb	r1, [r7, #5]
 8002b10:	2300      	movs	r3, #0
 8002b12:	2200      	movs	r2, #0
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff feff 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff ff23 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	7818      	ldrb	r0, [r3, #0]
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x14c>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	7ffa      	ldrb	r2, [r7, #31]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	216f      	movs	r1, #111	; 0x6f
 8002b36:	f7ff f863 	bl	8001c00 <_ZN6I2Cdev9readBytesEhhhPht>
            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {
 8002b3a:	7ffb      	ldrb	r3, [r7, #31]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f005 fa8f 	bl	8008064 <memcmp>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0xee>
                free(verifyBuffer);
 8002b4c:	69b8      	ldr	r0, [r7, #24]
 8002b4e:	f005 fa81 	bl	8008054 <free>
                return false; // uh oh.
 8002b52:	2300      	movs	r3, #0
 8002b54:	e02a      	b.n	8002bac <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x144>
            }
        }

        // increase byte index by [chunkSize]
        i += chunkSize;
 8002b56:	7ffb      	ldrb	r3, [r7, #31]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	8afb      	ldrh	r3, [r7, #22]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	82fb      	strh	r3, [r7, #22]

        // uint8_t automatically wraps to 0 at 256
        address += chunkSize;
 8002b60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
 8002b66:	4413      	add	r3, r2
 8002b68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

        // if we aren't done, update bank (if necessary) and address
        if (i < dataSize) {
 8002b6c:	8afa      	ldrh	r2, [r7, #22]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d29d      	bcs.n	8002ab0 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x48>
            if (address == 0) bank++;
 8002b74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x11a>
 8002b7c:	797b      	ldrb	r3, [r7, #5]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	717b      	strb	r3, [r7, #5]
            setMemoryBank(bank);
 8002b82:	7979      	ldrb	r1, [r7, #5]
 8002b84:	2300      	movs	r3, #0
 8002b86:	2200      	movs	r2, #0
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fec5 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
            setMemoryStartAddress(address);
 8002b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b92:	4619      	mov	r1, r3
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fee9 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
    for (i = 0; i < dataSize;) {
 8002b9a:	e789      	b.n	8002ab0 <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x48>
        }
    }
    if (verify) free(verifyBuffer);
 8002b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <_ZN7MPU605016writeMemoryBlockEPKhthhb+0x142>
 8002ba4:	69b8      	ldr	r0, [r7, #24]
 8002ba6:	f005 fa55 	bl	8008054 <free>
    return true;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>:
bool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	80fb      	strh	r3, [r7, #6]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	717b      	strb	r3, [r7, #5]
    return writeMemoryBlock(data, dataSize, bank, address, verify);
 8002bce:	7979      	ldrb	r1, [r7, #5]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	7f3b      	ldrb	r3, [r7, #28]
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	7e3b      	ldrb	r3, [r7, #24]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff42 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ZN7MPU605024writeDMPConfigurationSetEPKht>:

bool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08a      	sub	sp, #40	; 0x28
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
    uint8_t *progBuffer = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
    uint16_t i;

    // config set data is a long string of blocks with the following structure:
    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]
    uint8_t bank, offset, length;
    for (i = 0; i < dataSize;) {
 8002c00:	2300      	movs	r3, #0
 8002c02:	83bb      	strh	r3, [r7, #28]
 8002c04:	8bba      	ldrh	r2, [r7, #28]
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d24e      	bcs.n	8002caa <_ZN7MPU605024writeDMPConfigurationSetEPKht+0xbc>
        bank = data[i++];
 8002c0c:	8bbb      	ldrh	r3, [r7, #28]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	83ba      	strh	r2, [r7, #28]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	75fb      	strb	r3, [r7, #23]
        offset = data[i++];
 8002c1c:	8bbb      	ldrh	r3, [r7, #28]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	83ba      	strh	r2, [r7, #28]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	75bb      	strb	r3, [r7, #22]
        length = data[i++];
 8002c2c:	8bbb      	ldrh	r3, [r7, #28]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	83ba      	strh	r2, [r7, #28]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	757b      	strb	r3, [r7, #21]

        // write data or perform special action
        if (length > 0) {
 8002c3c:	7d7b      	ldrb	r3, [r7, #21]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <_ZN7MPU605024writeDMPConfigurationSetEPKht+0x84>
            // regular block of data to write
            progBuffer = (uint8_t *)data + i;
 8002c42:	8bbb      	ldrh	r3, [r7, #28]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4413      	add	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
            success = writeMemoryBlock(progBuffer, length, bank, offset, true);
 8002c4a:	7d7b      	ldrb	r3, [r7, #21]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	7df9      	ldrb	r1, [r7, #23]
 8002c50:	2301      	movs	r3, #1
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	7dbb      	ldrb	r3, [r7, #22]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff ff03 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>
 8002c62:	4603      	mov	r3, r0
 8002c64:	77fb      	strb	r3, [r7, #31]
            i += length;
 8002c66:	7d7b      	ldrb	r3, [r7, #21]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	8bbb      	ldrh	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	83bb      	strh	r3, [r7, #28]
 8002c70:	e016      	b.n	8002ca0 <_ZN7MPU605024writeDMPConfigurationSetEPKht+0xb2>
        } else {
            special = data[i++];
 8002c72:	8bbb      	ldrh	r3, [r7, #28]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	83ba      	strh	r2, [r7, #28]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	753b      	strb	r3, [r7, #20]

            if (special == 0x01) {
 8002c82:	7d3b      	ldrb	r3, [r7, #20]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d109      	bne.n	8002c9c <_ZN7MPU605024writeDMPConfigurationSetEPKht+0xae>
                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2232      	movs	r2, #50	; 0x32
 8002c8e:	2138      	movs	r1, #56	; 0x38
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f87d 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
                success = true;
 8002c96:	2301      	movs	r3, #1
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e001      	b.n	8002ca0 <_ZN7MPU605024writeDMPConfigurationSetEPKht+0xb2>
            } else {
                success = false;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	77fb      	strb	r3, [r7, #31]
            }
        }
        if (!success) {
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ae      	bne.n	8002c04 <_ZN7MPU605024writeDMPConfigurationSetEPKht+0x16>
            return false; // uh oh
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <_ZN7MPU605024writeDMPConfigurationSetEPKht+0xbe>
        }
    }
    return true;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>:

bool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
    return writeDMPConfigurationSet(data, dataSize);
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff ff90 	bl	8002bee <_ZN7MPU605024writeDMPConfigurationSetEPKht>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <_ZN7MPU605013setDMPConfig1Eh>:

uint8_t MPU6050::getDMPConfig1() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);
    return buffer[0];
}
void MPU6050::setDMPConfig1(uint8_t config) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	2170      	movs	r1, #112	; 0x70
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f84f 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN7MPU605013setDMPConfig2Eh>:
uint8_t MPU6050::getDMPConfig2() {
    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);
    return buffer[0];
}

void MPU6050::setDMPConfig2(uint8_t config) {
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	70fb      	strb	r3, [r7, #3]
    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	2171      	movs	r1, #113	; 0x71
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f83e 	bl	8001d90 <_ZN6I2Cdev9writeByteEhhh>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_ZN7MPU605013DMPInitializeEv>:

uint8_t MPU6050::DMPInitialize() {
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b0ab      	sub	sp, #172	; 0xac
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
    // reset device
    reset();
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fcae 	bl	8002686 <_ZN7MPU60505resetEv>
    // wait after reset
    HAL_Delay(30);
 8002d2a:	201e      	movs	r0, #30
 8002d2c:	f001 f9fe 	bl	800412c <HAL_Delay>

    // disable sleep mode
    setSleepEnabled(false);
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fcd4 	bl	80026e0 <_ZN7MPU605015setSleepEnabledEb>

    // get MPU hardware revision
    setMemoryBank(0x10, true, true);
 8002d38:	2301      	movs	r3, #1
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fdea 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>
    setMemoryStartAddress(0x06);
 8002d44:	2106      	movs	r1, #6
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fe10 	bl	800296c <_ZN7MPU605021setMemoryStartAddressEh>
    setMemoryBank(0, false, false);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fde0 	bl	8002918 <_ZN7MPU605013setMemoryBankEhbb>

    // setup weird slave stuff (?)
    setSlaveAddress(0, 0x7F);
 8002d58:	227f      	movs	r2, #127	; 0x7f
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fc4e 	bl	80025fe <_ZN7MPU605015setSlaveAddressEhh>
    setI2CMasterModeEnabled(false);
 8002d62:	2100      	movs	r1, #0
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fcdd 	bl	8002724 <_ZN7MPU605023setI2CMasterModeEnabledEb>
    setSlaveAddress(0, 0x68);
 8002d6a:	2268      	movs	r2, #104	; 0x68
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fc45 	bl	80025fe <_ZN7MPU605015setSlaveAddressEhh>
    resetI2CMaster();
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fca4 	bl	80026c2 <_ZN7MPU605014resetI2CMasterEv>
    HAL_Delay(20);
 8002d7a:	2014      	movs	r0, #20
 8002d7c:	f001 f9d6 	bl	800412c <HAL_Delay>

    // load DMP code into memory banks
    if (writeProgMemoryBlock(dmpMemory, MPU6050_DMP_CODE_SIZE)) {
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f240 7289 	movw	r2, #1929	; 0x789
 8002d8e:	49c3      	ldr	r1, [pc, #780]	; (800309c <_ZN7MPU605013DMPInitializeEv+0x380>)
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff11 	bl	8002bb8 <_ZN7MPU605020writeProgMemoryBlockEPKhthhb>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8221 	beq.w	80031e0 <_ZN7MPU605013DMPInitializeEv+0x4c4>

        // write DMP configuration
        if (writeProgDMPConfigurationSet(dmpConfig, MPU6050_DMP_CONFIG_SIZE)) {
 8002d9e:	22c0      	movs	r2, #192	; 0xc0
 8002da0:	49bf      	ldr	r1, [pc, #764]	; (80030a0 <_ZN7MPU605013DMPInitializeEv+0x384>)
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff86 	bl	8002cb4 <_ZN7MPU605028writeProgDMPConfigurationSetEPKht>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8216 	beq.w	80031dc <_ZN7MPU605013DMPInitializeEv+0x4c0>

            setClockSource(MPU6050_CLOCK_PLL_ZGYRO);
 8002db0:	2103      	movs	r1, #3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fcc7 	bl	8002746 <_ZN7MPU605014setClockSourceEh>
            setIntEnabled(0x12);
 8002db8:	2112      	movs	r1, #18
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fc52 	bl	8002664 <_ZN7MPU605013setIntEnabledEh>
            setRate(4); // 1khz / (1 + 4) = 200 Hz
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fb74 	bl	80024b0 <_ZN7MPU60507setRateEh>
            setExternalFrameSync(MPU6050_EXT_SYNC_TEMP_OUT_L);
 8002dc8:	2101      	movs	r1, #1
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fb81 	bl	80024d2 <_ZN7MPU605020setExternalFrameSyncEh>
            setDLPFMode(MPU6050_DLPF_BW_42);
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fb90 	bl	80024f8 <_ZN7MPU605011setDLPFModeEh>
            setFullScaleGyroscopeRange(MPU6050_GYRO_FS_2000);
 8002dd8:	2103      	movs	r1, #3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fb9f 	bl	800251e <_ZN7MPU605026setFullScaleGyroscopeRangeEh>

            //write start address MSB into register
            setDMPConfig1(0x03);
 8002de0:	2103      	movs	r1, #3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff78 	bl	8002cd8 <_ZN7MPU605013setDMPConfig1Eh>
            //write start address LSB into register
            setDMPConfig2(0x00);
 8002de8:	2100      	movs	r1, #0
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff85 	bl	8002cfa <_ZN7MPU605013setDMPConfig2Eh>

            setOTPBankValid(false);
 8002df0:	2100      	movs	r1, #0
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fcba 	bl	800276c <_ZN7MPU605015setOTPBankValidEb>

            uint8_t dmpUpdate[16], j;
            uint16_t pos = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002e04:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d906      	bls.n	8002e1a <_ZN7MPU605013DMPInitializeEv+0xfe>
 8002e0c:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002e10:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002e14:	3303      	adds	r3, #3
 8002e16:	429a      	cmp	r2, r3
 8002e18:	da15      	bge.n	8002e46 <_ZN7MPU605013DMPInitializeEv+0x12a>
 8002e1a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002e1e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e22:	49a0      	ldr	r1, [pc, #640]	; (80030a4 <_ZN7MPU605013DMPInitializeEv+0x388>)
 8002e24:	5c8a      	ldrb	r2, [r1, r2]
 8002e26:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002e30:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e34:	3301      	adds	r3, #1
 8002e36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002e3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002e44:	e7de      	b.n	8002e04 <_ZN7MPU605013DMPInitializeEv+0xe8>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002e46:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e4a:	3103      	adds	r1, #3
 8002e4c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002e50:	b298      	uxth	r0, r3
 8002e52:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8002e56:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4623      	mov	r3, r4
 8002e62:	4602      	mov	r2, r0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fdff 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002e70:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d906      	bls.n	8002e86 <_ZN7MPU605013DMPInitializeEv+0x16a>
 8002e78:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002e7c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002e80:	3303      	adds	r3, #3
 8002e82:	429a      	cmp	r2, r3
 8002e84:	da15      	bge.n	8002eb2 <_ZN7MPU605013DMPInitializeEv+0x196>
 8002e86:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002e8a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e8e:	4985      	ldr	r1, [pc, #532]	; (80030a4 <_ZN7MPU605013DMPInitializeEv+0x388>)
 8002e90:	5c8a      	ldrb	r2, [r1, r2]
 8002e92:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002e96:	440b      	add	r3, r1
 8002e98:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002e9c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002ea6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002eb0:	e7de      	b.n	8002e70 <_ZN7MPU605013DMPInitializeEv+0x154>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002eb2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002eb6:	3103      	adds	r1, #3
 8002eb8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002ebc:	b298      	uxth	r0, r3
 8002ebe:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8002ec2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	9201      	str	r2, [sp, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4623      	mov	r3, r4
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fdc9 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            resetFIFO();
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fbe4 	bl	80026a4 <_ZN7MPU60509resetFIFOEv>

            uint16_t fifoCount = getFIFOCount();
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff fc57 	bl	8002790 <_ZN7MPU605012getFIFOCountEv>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            uint8_t fifoBuffer[128];

            getFIFOBytes(fifoBuffer, fifoCount);
 8002ee8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	f107 0308 	add.w	r3, r7, #8
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fc6b 	bl	80027d0 <_ZN7MPU605012getFIFOBytesEPhh>

            setMotionDetectionThreshold(2);
 8002efa:	2102      	movs	r1, #2
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fb3a 	bl	8002576 <_ZN7MPU605027setMotionDetectionThresholdEh>
            setZeroMotionDetectionThreshold(156);
 8002f02:	219c      	movs	r1, #156	; 0x9c
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fb58 	bl	80025ba <_ZN7MPU605031setZeroMotionDetectionThresholdEh>
            setMotionDetectionDuration(80);
 8002f0a:	2150      	movs	r1, #80	; 0x50
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fb43 	bl	8002598 <_ZN7MPU605026setMotionDetectionDurationEh>
            setZeroMotionDetectionDuration(0);
 8002f12:	2100      	movs	r1, #0
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fb61 	bl	80025dc <_ZN7MPU605030setZeroMotionDetectionDurationEh>

            resetFIFO();
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fbc2 	bl	80026a4 <_ZN7MPU60509resetFIFOEv>

            setFIFOEnabled(true);
 8002f20:	2101      	movs	r1, #1
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fbed 	bl	8002702 <_ZN7MPU605014setFIFOEnabledEb>
            setDMPEnabled(true);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fcd4 	bl	80028d8 <_ZN7MPU605013setDMPEnabledEb>
            resetDMP();
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fce2 	bl	80028fa <_ZN7MPU60508resetDMPEv>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002f3c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d906      	bls.n	8002f52 <_ZN7MPU605013DMPInitializeEv+0x236>
 8002f44:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002f48:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002f4c:	3303      	adds	r3, #3
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	da15      	bge.n	8002f7e <_ZN7MPU605013DMPInitializeEv+0x262>
 8002f52:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002f56:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f5a:	4952      	ldr	r1, [pc, #328]	; (80030a4 <_ZN7MPU605013DMPInitializeEv+0x388>)
 8002f5c:	5c8a      	ldrb	r2, [r1, r2]
 8002f5e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002f62:	440b      	add	r3, r1
 8002f64:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002f68:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002f72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002f76:	3301      	adds	r3, #1
 8002f78:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002f7c:	e7de      	b.n	8002f3c <_ZN7MPU605013DMPInitializeEv+0x220>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002f7e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002f82:	3103      	adds	r1, #3
 8002f84:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002f88:	b298      	uxth	r0, r3
 8002f8a:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8002f8e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002f92:	2201      	movs	r2, #1
 8002f94:	9201      	str	r2, [sp, #4]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4623      	mov	r3, r4
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff fd63 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002fa8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d906      	bls.n	8002fbe <_ZN7MPU605013DMPInitializeEv+0x2a2>
 8002fb0:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002fb4:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002fb8:	3303      	adds	r3, #3
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	da15      	bge.n	8002fea <_ZN7MPU605013DMPInitializeEv+0x2ce>
 8002fbe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002fc2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002fc6:	4937      	ldr	r1, [pc, #220]	; (80030a4 <_ZN7MPU605013DMPInitializeEv+0x388>)
 8002fc8:	5c8a      	ldrb	r2, [r1, r2]
 8002fca:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002fce:	440b      	add	r3, r1
 8002fd0:	f803 2c18 	strb.w	r2, [r3, #-24]
 8002fd4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002fde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002fe8:	e7de      	b.n	8002fa8 <_ZN7MPU605013DMPInitializeEv+0x28c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8002fea:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002fee:	3103      	adds	r1, #3
 8002ff0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002ff4:	b298      	uxth	r0, r3
 8002ff6:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8002ffa:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002ffe:	2201      	movs	r2, #1
 8003000:	9201      	str	r2, [sp, #4]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4623      	mov	r3, r4
 8003006:	4602      	mov	r2, r0
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fd2d 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 800300e:	2300      	movs	r3, #0
 8003010:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003014:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003018:	2b03      	cmp	r3, #3
 800301a:	d906      	bls.n	800302a <_ZN7MPU605013DMPInitializeEv+0x30e>
 800301c:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003020:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003024:	3303      	adds	r3, #3
 8003026:	429a      	cmp	r2, r3
 8003028:	da15      	bge.n	8003056 <_ZN7MPU605013DMPInitializeEv+0x33a>
 800302a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800302e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003032:	491c      	ldr	r1, [pc, #112]	; (80030a4 <_ZN7MPU605013DMPInitializeEv+0x388>)
 8003034:	5c8a      	ldrb	r2, [r1, r2]
 8003036:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800303a:	440b      	add	r3, r1
 800303c:	f803 2c18 	strb.w	r2, [r3, #-24]
 8003040:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003044:	3301      	adds	r3, #1
 8003046:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800304a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800304e:	3301      	adds	r3, #1
 8003050:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8003054:	e7de      	b.n	8003014 <_ZN7MPU605013DMPInitializeEv+0x2f8>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003056:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800305a:	3103      	adds	r1, #3
 800305c:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003060:	b298      	uxth	r0, r3
 8003062:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8003066:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800306a:	2201      	movs	r2, #1
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4623      	mov	r3, r4
 8003072:	4602      	mov	r2, r0
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fcf7 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            while ((fifoCount = getFIFOCount()) < 3);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fb88 	bl	8002790 <_ZN7MPU605012getFIFOCountEv>
 8003080:	4603      	mov	r3, r0
 8003082:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003086:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800308a:	2b02      	cmp	r3, #2
 800308c:	bf94      	ite	ls
 800308e:	2301      	movls	r3, #1
 8003090:	2300      	movhi	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <_ZN7MPU605013DMPInitializeEv+0x38c>
 8003098:	e7ef      	b.n	800307a <_ZN7MPU605013DMPInitializeEv+0x35e>
 800309a:	bf00      	nop
 800309c:	08008230 	.word	0x08008230
 80030a0:	080089bc 	.word	0x080089bc
 80030a4:	08008a7c 	.word	0x08008a7c

            getFIFOBytes(fifoBuffer, fifoCount);
 80030a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fb8b 	bl	80027d0 <_ZN7MPU605012getFIFOBytesEPhh>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80030c0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d906      	bls.n	80030d6 <_ZN7MPU605013DMPInitializeEv+0x3ba>
 80030c8:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80030cc:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80030d0:	3303      	adds	r3, #3
 80030d2:	429a      	cmp	r2, r3
 80030d4:	da15      	bge.n	8003102 <_ZN7MPU605013DMPInitializeEv+0x3e6>
 80030d6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80030da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80030de:	4943      	ldr	r1, [pc, #268]	; (80031ec <_ZN7MPU605013DMPInitializeEv+0x4d0>)
 80030e0:	5c8a      	ldrb	r2, [r1, r2]
 80030e2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80030e6:	440b      	add	r3, r1
 80030e8:	f803 2c18 	strb.w	r2, [r3, #-24]
 80030ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80030f0:	3301      	adds	r3, #1
 80030f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80030f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80030fa:	3301      	adds	r3, #1
 80030fc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8003100:	e7de      	b.n	80030c0 <_ZN7MPU605013DMPInitializeEv+0x3a4>
            readMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 8003102:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003106:	3103      	adds	r1, #3
 8003108:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800310c:	b29a      	uxth	r2, r3
 800310e:	f897 0088 	ldrb.w	r0, [r7, #136]	; 0x88
 8003112:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4603      	mov	r3, r0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fc38 	bl	8002990 <_ZN7MPU605015readMemoryBlockEPhthh>

            while ((fifoCount = getFIFOCount()) < 3);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fb35 	bl	8002790 <_ZN7MPU605012getFIFOCountEv>
 8003126:	4603      	mov	r3, r0
 8003128:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800312c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003130:	2b02      	cmp	r3, #2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d000      	beq.n	8003140 <_ZN7MPU605013DMPInitializeEv+0x424>
 800313e:	e7ef      	b.n	8003120 <_ZN7MPU605013DMPInitializeEv+0x404>

            getFIFOBytes(fifoBuffer, fifoCount);
 8003140:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003144:	b2da      	uxtb	r2, r3
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fb3f 	bl	80027d0 <_ZN7MPU605012getFIFOBytesEPhh>

            for (j = 0; j < 4 || j < dmpUpdate[2] + 3; j++, pos++) dmpUpdate[j] = pgm_read_byte(&dmpUpdates[pos]);
 8003152:	2300      	movs	r3, #0
 8003154:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003158:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800315c:	2b03      	cmp	r3, #3
 800315e:	d906      	bls.n	800316e <_ZN7MPU605013DMPInitializeEv+0x452>
 8003160:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003164:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003168:	3303      	adds	r3, #3
 800316a:	429a      	cmp	r2, r3
 800316c:	da15      	bge.n	800319a <_ZN7MPU605013DMPInitializeEv+0x47e>
 800316e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8003172:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003176:	491d      	ldr	r1, [pc, #116]	; (80031ec <_ZN7MPU605013DMPInitializeEv+0x4d0>)
 8003178:	5c8a      	ldrb	r2, [r1, r2]
 800317a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800317e:	440b      	add	r3, r1
 8003180:	f803 2c18 	strb.w	r2, [r3, #-24]
 8003184:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003188:	3301      	adds	r3, #1
 800318a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800318e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003192:	3301      	adds	r3, #1
 8003194:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8003198:	e7de      	b.n	8003158 <_ZN7MPU605013DMPInitializeEv+0x43c>
            writeMemoryBlock(dmpUpdate + 3, dmpUpdate[2], dmpUpdate[0], dmpUpdate[1]);
 800319a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800319e:	3103      	adds	r1, #3
 80031a0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80031a4:	b298      	uxth	r0, r3
 80031a6:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 80031aa:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80031ae:	2201      	movs	r2, #1
 80031b0:	9201      	str	r2, [sp, #4]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	4623      	mov	r3, r4
 80031b6:	4602      	mov	r2, r0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fc55 	bl	8002a68 <_ZN7MPU605016writeMemoryBlockEPKhthhb>

            setDMPEnabled(true);
 80031be:	2101      	movs	r1, #1
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fb89 	bl	80028d8 <_ZN7MPU605013setDMPEnabledEb>

            dmpPacketSize = 42;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	222a      	movs	r2, #42	; 0x2a
 80031ca:	831a      	strh	r2, [r3, #24]

            resetFIFO();
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff fa69 	bl	80026a4 <_ZN7MPU60509resetFIFOEv>
            getIntStatus();
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fa30 	bl	8002638 <_ZN7MPU605012getIntStatusEv>
            return 2; // configuration block loading failed
        }
    } else {
        return 1; // main binary block loading failed
    }
    return 0; // success
 80031d8:	2300      	movs	r3, #0
 80031da:	e002      	b.n	80031e2 <_ZN7MPU605013DMPInitializeEv+0x4c6>
            return 2; // configuration block loading failed
 80031dc:	2302      	movs	r3, #2
 80031de:	e000      	b.n	80031e2 <_ZN7MPU605013DMPInitializeEv+0x4c6>
        return 1; // main binary block loading failed
 80031e0:	2301      	movs	r3, #1
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	37a4      	adds	r7, #164	; 0xa4
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	08008a7c 	.word	0x08008a7c

080031f0 <_ZN7MPU605020DMPGetFIFOPacketSizeEv>:
        if (processed != 0) (*processed)++;
    }
    return 0;
}

uint16_t MPU6050::DMPGetFIFOPacketSize() {
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    return dmpPacketSize;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8b1b      	ldrh	r3, [r3, #24]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003218:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <MX_ADC1_Init+0xac>)
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <MX_ADC1_Init+0xb0>)
 800321c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003224:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003226:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003228:	2200      	movs	r2, #0
 800322a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <MX_ADC1_Init+0xac>)
 800322e:	2200      	movs	r2, #0
 8003230:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003234:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003238:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <MX_ADC1_Init+0xac>)
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003242:	2203      	movs	r2, #3
 8003244:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003246:	481b      	ldr	r0, [pc, #108]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003248:	f000 ff92 	bl	8004170 <HAL_ADC_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003252:	f000 fa81 	bl	8003758 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003256:	2305      	movs	r3, #5
 8003258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800325a:	2301      	movs	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4813      	ldr	r0, [pc, #76]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003268:	f001 f908 	bl	800447c <HAL_ADC_ConfigChannel>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003272:	f000 fa71 	bl	8003758 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003276:	2304      	movs	r3, #4
 8003278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800327a:	2302      	movs	r3, #2
 800327c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	4619      	mov	r1, r3
 8003282:	480c      	ldr	r0, [pc, #48]	; (80032b4 <MX_ADC1_Init+0xac>)
 8003284:	f001 f8fa 	bl	800447c <HAL_ADC_ConfigChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800328e:	f000 fa63 	bl	8003758 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003292:	2303      	movs	r3, #3
 8003294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <MX_ADC1_Init+0xac>)
 800329c:	f001 f8ee 	bl	800447c <HAL_ADC_ConfigChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80032a6:	f000 fa57 	bl	8003758 <Error_Handler>
  }

}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200001f8 	.word	0x200001f8
 80032b8:	40012400 	.word	0x40012400

080032bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d15f      	bne.n	800339c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	4a31      	ldr	r2, [pc, #196]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	6193      	str	r3, [r2, #24]
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003324:	2330      	movs	r3, #48	; 0x30
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003328:	2303      	movs	r3, #3
 800332a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f107 0318 	add.w	r3, r7, #24
 8003330:	4619      	mov	r1, r3
 8003332:	481e      	ldr	r0, [pc, #120]	; (80033ac <HAL_ADC_MspInit+0xf0>)
 8003334:	f001 fd0a 	bl	8004d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PB1_AN_5_0V_Pin|PB1_AN_3_3V_Pin;
 8003338:	2303      	movs	r3, #3
 800333a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333c:	2303      	movs	r3, #3
 800333e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003340:	f107 0318 	add.w	r3, r7, #24
 8003344:	4619      	mov	r1, r3
 8003346:	481a      	ldr	r0, [pc, #104]	; (80033b0 <HAL_ADC_MspInit+0xf4>)
 8003348:	f001 fd00 	bl	8004d4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_ADC_MspInit+0xfc>)
 8003350:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003354:	2200      	movs	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 800336e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003372:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003376:	2220      	movs	r2, #32
 8003378:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 800337c:	2200      	movs	r2, #0
 800337e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003382:	f001 fb0d 	bl	80049a0 <HAL_DMA_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800338c:	f000 f9e4 	bl	8003758 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003394:	621a      	str	r2, [r3, #32]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <HAL_ADC_MspInit+0xf8>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40012400 	.word	0x40012400
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40010800 	.word	0x40010800
 80033b0:	40010c00 	.word	0x40010c00
 80033b4:	20000228 	.word	0x20000228
 80033b8:	40020008 	.word	0x40020008

080033bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_DMA_Init+0x38>)
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <MX_DMA_Init+0x38>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6153      	str	r3, [r2, #20]
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_DMA_Init+0x38>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	200b      	movs	r0, #11
 80033e0:	f001 faa7 	bl	8004932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033e4:	200b      	movs	r0, #11
 80033e6:	f001 fac0 	bl	800496a <HAL_NVIC_EnableIRQ>

}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000

080033f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fe:	f107 0310 	add.w	r3, r7, #16
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340c:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <MX_GPIO_Init+0x140>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a49      	ldr	r2, [pc, #292]	; (8003538 <MX_GPIO_Init+0x140>)
 8003412:	f043 0310 	orr.w	r3, r3, #16
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b47      	ldr	r3, [pc, #284]	; (8003538 <MX_GPIO_Init+0x140>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003424:	4b44      	ldr	r3, [pc, #272]	; (8003538 <MX_GPIO_Init+0x140>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a43      	ldr	r2, [pc, #268]	; (8003538 <MX_GPIO_Init+0x140>)
 800342a:	f043 0320 	orr.w	r3, r3, #32
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <MX_GPIO_Init+0x140>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <MX_GPIO_Init+0x140>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a3d      	ldr	r2, [pc, #244]	; (8003538 <MX_GPIO_Init+0x140>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b3b      	ldr	r3, [pc, #236]	; (8003538 <MX_GPIO_Init+0x140>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003454:	4b38      	ldr	r3, [pc, #224]	; (8003538 <MX_GPIO_Init+0x140>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4a37      	ldr	r2, [pc, #220]	; (8003538 <MX_GPIO_Init+0x140>)
 800345a:	f043 0308 	orr.w	r3, r3, #8
 800345e:	6193      	str	r3, [r2, #24]
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <MX_GPIO_Init+0x140>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003472:	4832      	ldr	r0, [pc, #200]	; (800353c <MX_GPIO_Init+0x144>)
 8003474:	f001 fdc4 	bl	8005000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_MA_IN2_Pin|PB13_MA_IN1_Pin|PB14_MB_IN1_Pin|PB15_MB_IN2_Pin
 8003478:	2200      	movs	r2, #0
 800347a:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
 800347e:	4830      	ldr	r0, [pc, #192]	; (8003540 <MX_GPIO_Init+0x148>)
 8003480:	f001 fdbe 	bl	8005000 <HAL_GPIO_WritePin>
                          |PB3_LED1G_Pin|PB4_LED1B_Pin|PB5_LED2R_Pin|PB6_LED2G_Pin
                          |PB7_LED2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA15_LED1R_GPIO_Port, PA15_LED1R_Pin, GPIO_PIN_RESET);
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800348a:	482e      	ldr	r0, [pc, #184]	; (8003544 <MX_GPIO_Init+0x14c>)
 800348c:	f001 fdb8 	bl	8005000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003496:	2301      	movs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2302      	movs	r3, #2
 80034a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a2:	f107 0310 	add.w	r3, r7, #16
 80034a6:	4619      	mov	r1, r3
 80034a8:	4824      	ldr	r0, [pc, #144]	; (800353c <MX_GPIO_Init+0x144>)
 80034aa:	f001 fc4f 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80034ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80034b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b4:	2303      	movs	r3, #3
 80034b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4619      	mov	r1, r3
 80034be:	481f      	ldr	r0, [pc, #124]	; (800353c <MX_GPIO_Init+0x144>)
 80034c0:	f001 fc44 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034c4:	2304      	movs	r3, #4
 80034c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c8:	2303      	movs	r3, #3
 80034ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	4619      	mov	r1, r3
 80034d2:	481b      	ldr	r0, [pc, #108]	; (8003540 <MX_GPIO_Init+0x148>)
 80034d4:	f001 fc3a 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = PB12_MA_IN2_Pin|PB13_MA_IN1_Pin|PB14_MB_IN1_Pin|PB15_MB_IN2_Pin
 80034d8:	f24f 03f8 	movw	r3, #61688	; 0xf0f8
 80034dc:	613b      	str	r3, [r7, #16]
                          |PB3_LED1G_Pin|PB4_LED1B_Pin|PB5_LED2R_Pin|PB6_LED2G_Pin
                          |PB7_LED2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	4619      	mov	r1, r3
 80034f0:	4813      	ldr	r0, [pc, #76]	; (8003540 <MX_GPIO_Init+0x148>)
 80034f2:	f001 fc2b 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA12_EXTI12_MPU_Pin;
 80034f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <MX_GPIO_Init+0x150>)
 80034fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PA12_EXTI12_MPU_GPIO_Port, &GPIO_InitStruct);
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	4619      	mov	r1, r3
 800350a:	480e      	ldr	r0, [pc, #56]	; (8003544 <MX_GPIO_Init+0x14c>)
 800350c:	f001 fc1e 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA15_LED1R_Pin;
 8003510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003516:	2301      	movs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2302      	movs	r3, #2
 8003520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA15_LED1R_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4619      	mov	r1, r3
 8003528:	4806      	ldr	r0, [pc, #24]	; (8003544 <MX_GPIO_Init+0x14c>)
 800352a:	f001 fc0f 	bl	8004d4c <HAL_GPIO_Init>

}
 800352e:	bf00      	nop
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40011000 	.word	0x40011000
 8003540:	40010c00 	.word	0x40010c00
 8003544:	40010800 	.word	0x40010800
 8003548:	10110000 	.word	0x10110000

0800354c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <MX_I2C1_Init+0x50>)
 8003552:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <MX_I2C1_Init+0x54>)
 8003554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <MX_I2C1_Init+0x50>)
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <MX_I2C1_Init+0x58>)
 800355a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_I2C1_Init+0x50>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_I2C1_Init+0x50>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_I2C1_Init+0x50>)
 800356a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800356e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <MX_I2C1_Init+0x50>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_I2C1_Init+0x50>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <MX_I2C1_Init+0x50>)
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_I2C1_Init+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <MX_I2C1_Init+0x50>)
 800358a:	f001 fd69 	bl	8005060 <HAL_I2C_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003594:	f000 f8e0 	bl	8003758 <Error_Handler>
  }

}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000026c 	.word	0x2000026c
 80035a0:	40005400 	.word	0x40005400
 80035a4:	00061a80 	.word	0x00061a80

080035a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <HAL_I2C_MspInit+0x90>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d132      	bne.n	800362e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_I2C_MspInit+0x94>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_I2C_MspInit+0x94>)
 80035ce:	f043 0308 	orr.w	r3, r3, #8
 80035d2:	6193      	str	r3, [r2, #24]
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_I2C_MspInit+0x94>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_MPU_Pin|I2C1_SDA_MPU_Pin;
 80035e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035e6:	2312      	movs	r3, #18
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4812      	ldr	r0, [pc, #72]	; (8003640 <HAL_I2C_MspInit+0x98>)
 80035f6:	f001 fba9 	bl	8004d4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_I2C_MspInit+0x9c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <HAL_I2C_MspInit+0x9c>)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_I2C_MspInit+0x94>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <HAL_I2C_MspInit+0x94>)
 800361c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003620:	61d3      	str	r3, [r2, #28]
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_I2C_MspInit+0x94>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	; 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40005400 	.word	0x40005400
 800363c:	40021000 	.word	0x40021000
 8003640:	40010c00 	.word	0x40010c00
 8003644:	40010000 	.word	0x40010000

08003648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800364c:	f000 fd0c 	bl	8004068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003650:	f000 f819 	bl	8003686 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003654:	f7ff fed0 	bl	80033f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003658:	f7ff feb0 	bl	80033bc <MX_DMA_Init>
  MX_TIM1_Init();
 800365c:	f000 f96e 	bl	800393c <MX_TIM1_Init>
  MX_I2C1_Init();
 8003660:	f7ff ff74 	bl	800354c <MX_I2C1_Init>
  MX_TIM3_Init();
 8003664:	f000 fa80 	bl	8003b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003668:	f000 fad2 	bl	8003c10 <MX_TIM4_Init>
  MX_TIM2_Init();
 800366c:	f000 fa2a 	bl	8003ac4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003670:	f000 fbea 	bl	8003e48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003674:	f000 fc12 	bl	8003e9c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003678:	f7ff fdc6 	bl	8003208 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  extern_setup();
 800367c:	f7fe fa62 	bl	8001b44 <extern_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	extern_loop();
 8003680:	f7fe fa66 	bl	8001b50 <extern_loop>
 8003684:	e7fc      	b.n	8003680 <main+0x38>

08003686 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b094      	sub	sp, #80	; 0x50
 800368a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800368c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003690:	2228      	movs	r2, #40	; 0x28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f004 fcf4 	bl	8008082 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036c4:	2301      	movs	r3, #1
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c8:	2302      	movs	r3, #2
 80036ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80036d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fc4d 	bl	8005f7c <HAL_RCC_OscConfig>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <SystemClock_Config+0x66>
  {
    Error_Handler();
 80036e8:	f000 f836 	bl	8003758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ec:	230f      	movs	r3, #15
 80036ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f0:	2302      	movs	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	2102      	movs	r1, #2
 8003708:	4618      	mov	r0, r3
 800370a:	f002 feb7 	bl	800647c <HAL_RCC_ClockConfig>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003714:	f000 f820 	bl	8003758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003718:	2302      	movs	r3, #2
 800371a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800371c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003720:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f003 f86b 	bl	8006800 <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003730:	f000 f812 	bl	8003758 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003734:	f002 ff8c 	bl	8006650 <HAL_RCC_EnableCSS>
}
 8003738:	bf00      	nop
 800373a:	3750      	adds	r7, #80	; 0x50
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	extern_UART_Callback(huart);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe fa07 	bl	8001b5c <extern_UART_Callback>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800375c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003760:	4803      	ldr	r0, [pc, #12]	; (8003770 <Error_Handler+0x18>)
 8003762:	f001 fc65 	bl	8005030 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8003766:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800376a:	f000 fcdf 	bl	800412c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800376e:	e7f5      	b.n	800375c <Error_Handler+0x4>
 8003770:	40011000 	.word	0x40011000

08003774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_MspInit+0x5c>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <HAL_MspInit+0x5c>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6193      	str	r3, [r2, #24]
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_MspInit+0x5c>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_MspInit+0x5c>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_MspInit+0x5c>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	61d3      	str	r3, [r2, #28]
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_MspInit+0x5c>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_MspInit+0x60>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_MspInit+0x60>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40010000 	.word	0x40010000

080037d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80037dc:	f002 ffd8 	bl	8006790 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <HardFault_Handler+0x4>

080037ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ee:	e7fe      	b.n	80037ee <MemManage_Handler+0x4>

080037f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f4:	e7fe      	b.n	80037f4 <BusFault_Handler+0x4>

080037f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <UsageFault_Handler+0x4>

080037fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003824:	f000 fc66 	bl	80040f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}

0800382c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <DMA1_Channel1_IRQHandler+0x10>)
 8003832:	f001 f985 	bl	8004b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000228 	.word	0x20000228

08003840 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003844:	4802      	ldr	r0, [pc, #8]	; (8003850 <USART2_IRQHandler+0x10>)
 8003846:	f004 f881 	bl	800794c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000400 	.word	0x20000400

08003854 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <USART3_IRQHandler+0x10>)
 800385a:	f004 f877 	bl	800794c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200003c0 	.word	0x200003c0

08003868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <_sbrk+0x5c>)
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <_sbrk+0x60>)
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <_sbrk+0x64>)
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <_sbrk+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003898:	f004 fbaa 	bl	8007ff0 <__errno>
 800389c:	4602      	mov	r2, r0
 800389e:	230c      	movs	r3, #12
 80038a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295
 80038a6:	e009      	b.n	80038bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <_sbrk+0x64>)
 80038b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20005000 	.word	0x20005000
 80038c8:	00000400 	.word	0x00000400
 80038cc:	200001ec 	.word	0x200001ec
 80038d0:	20000448 	.word	0x20000448

080038d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <SystemInit+0x5c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <SystemInit+0x5c>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <SystemInit+0x5c>)
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4911      	ldr	r1, [pc, #68]	; (8003930 <SystemInit+0x5c>)
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <SystemInit+0x60>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <SystemInit+0x5c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <SystemInit+0x5c>)
 80038f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <SystemInit+0x5c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SystemInit+0x5c>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <SystemInit+0x5c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <SystemInit+0x5c>)
 8003912:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003916:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SystemInit+0x5c>)
 800391a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800391e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <SystemInit+0x64>)
 8003922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003926:	609a      	str	r2, [r3, #8]
#endif 
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	40021000 	.word	0x40021000
 8003934:	f8ff0000 	.word	0xf8ff0000
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b096      	sub	sp, #88	; 0x58
 8003940:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003950:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800395a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	615a      	str	r2, [r3, #20]
 800396c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2220      	movs	r2, #32
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f004 fb84 	bl	8008082 <memset>

  htim1.Instance = TIM1;
 800397a:	4b50      	ldr	r3, [pc, #320]	; (8003abc <MX_TIM1_Init+0x180>)
 800397c:	4a50      	ldr	r2, [pc, #320]	; (8003ac0 <MX_TIM1_Init+0x184>)
 800397e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003980:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <MX_TIM1_Init+0x180>)
 8003982:	2247      	movs	r2, #71	; 0x47
 8003984:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <MX_TIM1_Init+0x180>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800398c:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <MX_TIM1_Init+0x180>)
 800398e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003992:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003994:	4b49      	ldr	r3, [pc, #292]	; (8003abc <MX_TIM1_Init+0x180>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800399a:	4b48      	ldr	r3, [pc, #288]	; (8003abc <MX_TIM1_Init+0x180>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039a0:	4b46      	ldr	r3, [pc, #280]	; (8003abc <MX_TIM1_Init+0x180>)
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039a6:	4845      	ldr	r0, [pc, #276]	; (8003abc <MX_TIM1_Init+0x180>)
 80039a8:	f002 ffe0 	bl	800696c <HAL_TIM_Base_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80039b2:	f7ff fed1 	bl	8003758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039c0:	4619      	mov	r1, r3
 80039c2:	483e      	ldr	r0, [pc, #248]	; (8003abc <MX_TIM1_Init+0x180>)
 80039c4:	f003 f9f0 	bl	8006da8 <HAL_TIM_ConfigClockSource>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80039ce:	f7ff fec3 	bl	8003758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039d2:	483a      	ldr	r0, [pc, #232]	; (8003abc <MX_TIM1_Init+0x180>)
 80039d4:	f002 fff5 	bl	80069c2 <HAL_TIM_PWM_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80039de:	f7ff febb 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039ee:	4619      	mov	r1, r3
 80039f0:	4832      	ldr	r0, [pc, #200]	; (8003abc <MX_TIM1_Init+0x180>)
 80039f2:	f003 fd35 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80039fc:	f7ff feac 	bl	8003758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a00:	2360      	movs	r3, #96	; 0x60
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a20:	2200      	movs	r2, #0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <MX_TIM1_Init+0x180>)
 8003a26:	f003 f8f9 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003a30:	f7ff fe92 	bl	8003758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a38:	2204      	movs	r2, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481f      	ldr	r0, [pc, #124]	; (8003abc <MX_TIM1_Init+0x180>)
 8003a3e:	f003 f8ed 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003a48:	f7ff fe86 	bl	8003758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a50:	2208      	movs	r2, #8
 8003a52:	4619      	mov	r1, r3
 8003a54:	4819      	ldr	r0, [pc, #100]	; (8003abc <MX_TIM1_Init+0x180>)
 8003a56:	f003 f8e1 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003a60:	f7ff fe7a 	bl	8003758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a68:	220c      	movs	r2, #12
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4813      	ldr	r0, [pc, #76]	; (8003abc <MX_TIM1_Init+0x180>)
 8003a6e:	f003 f8d5 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003a78:	f7ff fe6e 	bl	8003758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4807      	ldr	r0, [pc, #28]	; (8003abc <MX_TIM1_Init+0x180>)
 8003aa0:	f003 fd22 	bl	80074e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003aaa:	f7ff fe55 	bl	8003758 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003aae:	4803      	ldr	r0, [pc, #12]	; (8003abc <MX_TIM1_Init+0x180>)
 8003ab0:	f000 f996 	bl	8003de0 <HAL_TIM_MspPostInit>

}
 8003ab4:	bf00      	nop
 8003ab6:	3758      	adds	r7, #88	; 0x58
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000340 	.word	0x20000340
 8003ac0:	40012c00 	.word	0x40012c00

08003ac4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aca:	f107 030c 	add.w	r3, r7, #12
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 fad5 	bl	8008082 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003b16:	230f      	movs	r3, #15
 8003b18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003b26:	230f      	movs	r3, #15
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	4619      	mov	r1, r3
 8003b30:	480c      	ldr	r0, [pc, #48]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003b32:	f002 ffad 	bl	8006a90 <HAL_TIM_Encoder_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003b3c:	f7ff fe0c 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4805      	ldr	r0, [pc, #20]	; (8003b64 <MX_TIM2_Init+0xa0>)
 8003b4e:	f003 fc87 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003b58:	f7ff fdfe 	bl	8003758 <Error_Handler>
  }

}
 8003b5c:	bf00      	nop
 8003b5e:	3730      	adds	r7, #48	; 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000380 	.word	0x20000380

08003b68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	2224      	movs	r2, #36	; 0x24
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fa83 	bl	8008082 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003b86:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <MX_TIM3_Init+0xa4>)
 8003b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b90:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003b98:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003b9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003bd6:	f002 ff5b 	bl	8006a90 <HAL_TIM_Encoder_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003be0:	f7ff fdba 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be4:	2300      	movs	r3, #0
 8003be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4805      	ldr	r0, [pc, #20]	; (8003c08 <MX_TIM3_Init+0xa0>)
 8003bf2:	f003 fc35 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003bfc:	f7ff fdac 	bl	8003758 <Error_Handler>
  }

}
 8003c00:	bf00      	nop
 8003c02:	3730      	adds	r7, #48	; 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000300 	.word	0x20000300
 8003c0c:	40000400 	.word	0x40000400

08003c10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c24:	463b      	mov	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <MX_TIM4_Init+0x98>)
 8003c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c32:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 36000;
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c40:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c52:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c54:	f002 fe8a 	bl	800696c <HAL_TIM_Base_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003c5e:	f7ff fd7b 	bl	8003758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c68:	f107 0308 	add.w	r3, r7, #8
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	480d      	ldr	r0, [pc, #52]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c70:	f003 f89a 	bl	8006da8 <HAL_TIM_ConfigClockSource>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003c7a:	f7ff fd6d 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c86:	463b      	mov	r3, r7
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <MX_TIM4_Init+0x94>)
 8003c8c:	f003 fbe8 	bl	8007460 <HAL_TIMEx_MasterConfigSynchronization>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003c96:	f7ff fd5f 	bl	8003758 <Error_Handler>
  }

}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200002c0 	.word	0x200002c0
 8003ca8:	40000800 	.word	0x40000800

08003cac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <HAL_TIM_Base_MspInit+0x58>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cc8:	6193      	str	r3, [r2, #24]
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cd6:	e010      	b.n	8003cfa <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <HAL_TIM_Base_MspInit+0x60>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10b      	bne.n	8003cfa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	61d3      	str	r3, [r2, #28]
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_TIM_Base_MspInit+0x5c>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40000800 	.word	0x40000800

08003d10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0318 	add.w	r3, r7, #24
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d124      	bne.n	8003d7a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	61d3      	str	r3, [r2, #28]
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d4e:	f043 0304 	orr.w	r3, r3, #4
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_1_ENC1A_Pin|TIM2_2_ENC1B_Pin;
 8003d60:	2303      	movs	r3, #3
 8003d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6c:	f107 0318 	add.w	r3, r7, #24
 8003d70:	4619      	mov	r1, r3
 8003d72:	4819      	ldr	r0, [pc, #100]	; (8003dd8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003d74:	f000 ffea 	bl	8004d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003d78:	e028      	b.n	8003dcc <HAL_TIM_Encoder_MspInit+0xbc>
  else if(tim_encoderHandle->Instance==TIM3)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <HAL_TIM_Encoder_MspInit+0xcc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d123      	bne.n	8003dcc <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	61d3      	str	r3, [r2, #28]
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6193      	str	r3, [r2, #24]
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_1_ENC2A_Pin|TIM3_2_ENC2B_Pin;
 8003db4:	23c0      	movs	r3, #192	; 0xc0
 8003db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	f107 0318 	add.w	r3, r7, #24
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003dc8:	f000 ffc0 	bl	8004d4c <HAL_GPIO_Init>
}
 8003dcc:	bf00      	nop
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40010800 	.word	0x40010800
 8003ddc:	40000400 	.word	0x40000400

08003de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_TIM_MspPostInit+0x5c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d118      	bne.n	8003e32 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_TIM_MspPostInit+0x60>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_TIM_MspPostInit+0x60>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	6193      	str	r3, [r2, #24]
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_TIM_MspPostInit+0x60>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_1_MA_PWM_Pin|TIM1_2_MB_PWM_Pin|TIM1_3_SER1_Pin|TIM1_4_SER2_Pin;
 8003e18:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e22:	2302      	movs	r3, #2
 8003e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4805      	ldr	r0, [pc, #20]	; (8003e44 <HAL_TIM_MspPostInit+0x64>)
 8003e2e:	f000 ff8d 	bl	8004d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e32:	bf00      	nop
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40010800 	.word	0x40010800

08003e48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <MX_USART2_UART_Init+0x50>)
 8003e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e6e:	220c      	movs	r2, #12
 8003e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e7e:	4805      	ldr	r0, [pc, #20]	; (8003e94 <MX_USART2_UART_Init+0x4c>)
 8003e80:	f003 fb83 	bl	800758a <HAL_UART_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e8a:	f7ff fc65 	bl	8003758 <Error_Handler>
  }

}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000400 	.word	0x20000400
 8003e98:	40004400 	.word	0x40004400

08003e9c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <MX_USART3_UART_Init+0x50>)
 8003ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ed2:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <MX_USART3_UART_Init+0x4c>)
 8003ed4:	f003 fb59 	bl	800758a <HAL_UART_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ede:	f7ff fc3b 	bl	8003758 <Error_Handler>
  }

}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200003c0 	.word	0x200003c0
 8003eec:	40004800 	.word	0x40004800

08003ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 0318 	add.w	r3, r7, #24
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <HAL_UART_MspInit+0x118>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d138      	bne.n	8003f82 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f10:	4b3e      	ldr	r3, [pc, #248]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a3d      	ldr	r2, [pc, #244]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	4b38      	ldr	r3, [pc, #224]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4a37      	ldr	r2, [pc, #220]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f2e:	f043 0304 	orr.w	r3, r3, #4
 8003f32:	6193      	str	r3, [r2, #24]
 8003f34:	4b35      	ldr	r3, [pc, #212]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_BT1_Pin;
 8003f40:	2304      	movs	r3, #4
 8003f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f44:	2302      	movs	r3, #2
 8003f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_BT1_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	f107 0318 	add.w	r3, r7, #24
 8003f50:	4619      	mov	r1, r3
 8003f52:	482f      	ldr	r0, [pc, #188]	; (8004010 <HAL_UART_MspInit+0x120>)
 8003f54:	f000 fefa 	bl	8004d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_RX_BT1_Pin;
 8003f58:	2308      	movs	r3, #8
 8003f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART2_RX_BT1_GPIO_Port, &GPIO_InitStruct);
 8003f64:	f107 0318 	add.w	r3, r7, #24
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4829      	ldr	r0, [pc, #164]	; (8004010 <HAL_UART_MspInit+0x120>)
 8003f6c:	f000 feee 	bl	8004d4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	2026      	movs	r0, #38	; 0x26
 8003f76:	f000 fcdc 	bl	8004932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f7a:	2026      	movs	r0, #38	; 0x26
 8003f7c:	f000 fcf5 	bl	800496a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003f80:	e03e      	b.n	8004000 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a23      	ldr	r2, [pc, #140]	; (8004014 <HAL_UART_MspInit+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d139      	bne.n	8004000 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003faa:	f043 0308 	orr.w	r3, r3, #8
 8003fae:	6193      	str	r3, [r2, #24]
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_UART_MspInit+0x11c>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_BT2_Pin;
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_BT2_GPIO_Port, &GPIO_InitStruct);
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <HAL_UART_MspInit+0x128>)
 8003fd2:	f000 febb 	bl	8004d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_BT2_Pin;
 8003fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART3_RX_BT2_GPIO_Port, &GPIO_InitStruct);
 8003fe4:	f107 0318 	add.w	r3, r7, #24
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480b      	ldr	r0, [pc, #44]	; (8004018 <HAL_UART_MspInit+0x128>)
 8003fec:	f000 feae 	bl	8004d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2027      	movs	r0, #39	; 0x27
 8003ff6:	f000 fc9c 	bl	8004932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ffa:	2027      	movs	r0, #39	; 0x27
 8003ffc:	f000 fcb5 	bl	800496a <HAL_NVIC_EnableIRQ>
}
 8004000:	bf00      	nop
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40004400 	.word	0x40004400
 800400c:	40021000 	.word	0x40021000
 8004010:	40010800 	.word	0x40010800
 8004014:	40004800 	.word	0x40004800
 8004018:	40010c00 	.word	0x40010c00

0800401c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800401c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800401e:	e003      	b.n	8004028 <LoopCopyDataInit>

08004020 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004022:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004024:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004026:	3104      	adds	r1, #4

08004028 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004028:	480a      	ldr	r0, [pc, #40]	; (8004054 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800402c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800402e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004030:	d3f6      	bcc.n	8004020 <CopyDataInit>
  ldr r2, =_sbss
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004034:	e002      	b.n	800403c <LoopFillZerobss>

08004036 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004038:	f842 3b04 	str.w	r3, [r2], #4

0800403c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800403e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004040:	d3f9      	bcc.n	8004036 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004042:	f7ff fc47 	bl	80038d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004046:	f003 ffd9 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800404a:	f7ff fafd 	bl	8003648 <main>
  bx lr
 800404e:	4770      	bx	lr
  ldr r3, =_sidata
 8004050:	08008b30 	.word	0x08008b30
  ldr r0, =_sdata
 8004054:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004058:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800405c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8004060:	20000448 	.word	0x20000448

08004064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC1_2_IRQHandler>
	...

08004068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_Init+0x28>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <HAL_Init+0x28>)
 8004072:	f043 0310 	orr.w	r3, r3, #16
 8004076:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004078:	2003      	movs	r0, #3
 800407a:	f000 fc4f 	bl	800491c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800407e:	2000      	movs	r0, #0
 8004080:	f000 f808 	bl	8004094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004084:	f7ff fb76 	bl	8003774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000

08004094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_InitTick+0x54>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_InitTick+0x58>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fc67 	bl	8004986 <HAL_SYSTICK_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00e      	b.n	80040e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d80a      	bhi.n	80040de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c8:	2200      	movs	r2, #0
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	f000 fc2f 	bl	8004932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d4:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <HAL_InitTick+0x5c>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000004 	.word	0x20000004
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	20000008 	.word	0x20000008

080040f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_IncTick+0x1c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_IncTick+0x20>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4413      	add	r3, r2
 8004104:	4a03      	ldr	r2, [pc, #12]	; (8004114 <HAL_IncTick+0x20>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	2000000c 	.word	0x2000000c
 8004114:	20000440 	.word	0x20000440

08004118 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return uwTick;
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <HAL_GetTick+0x10>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	20000440 	.word	0x20000440

0800412c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff fff0 	bl	8004118 <HAL_GetTick>
 8004138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d005      	beq.n	8004152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_Delay+0x40>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004152:	bf00      	nop
 8004154:	f7ff ffe0 	bl	8004118 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d8f7      	bhi.n	8004154 <HAL_Delay+0x28>
  {
  }
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000000c 	.word	0x2000000c

08004170 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0be      	b.n	8004310 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff f884 	bl	80032bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 faab 	bl	8004710 <ADC_ConversionStop_Disable>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 8099 	bne.w	80042fe <HAL_ADC_Init+0x18e>
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 8095 	bne.w	80042fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041dc:	f023 0302 	bic.w	r3, r3, #2
 80041e0:	f043 0202 	orr.w	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7b1b      	ldrb	r3, [r3, #12]
 80041f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004208:	d003      	beq.n	8004212 <HAL_ADC_Init+0xa2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <HAL_ADC_Init+0xa8>
 8004212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004216:	e000      	b.n	800421a <HAL_ADC_Init+0xaa>
 8004218:	2300      	movs	r3, #0
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7d1b      	ldrb	r3, [r3, #20]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d119      	bne.n	800425c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7b1b      	ldrb	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	3b01      	subs	r3, #1
 8004236:	035a      	lsls	r2, r3, #13
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e00b      	b.n	800425c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_ADC_Init+0x1a8>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	430b      	orrs	r3, r1
 8004282:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428c:	d003      	beq.n	8004296 <HAL_ADC_Init+0x126>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d104      	bne.n	80042a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	3b01      	subs	r3, #1
 800429c:	051b      	lsls	r3, r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <HAL_ADC_Init+0x1ac>)
 80042bc:	4013      	ands	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d10b      	bne.n	80042dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042da:	e018      	b.n	800430e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f023 0312 	bic.w	r3, r3, #18
 80042e4:	f043 0210 	orr.w	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042fc:	e007      	b.n	800430e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	f043 0210 	orr.w	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	ffe1f7fd 	.word	0xffe1f7fd
 800431c:	ff1f0efe 	.word	0xff1f0efe

08004320 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_ADC_Start+0x1a>
 8004336:	2302      	movs	r3, #2
 8004338:	e098      	b.n	800446c <HAL_ADC_Start+0x14c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f992 	bl	800466c <ADC_Enable>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8087 	bne.w	8004462 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a41      	ldr	r2, [pc, #260]	; (8004474 <HAL_ADC_Start+0x154>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d105      	bne.n	800437e <HAL_ADC_Start+0x5e>
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_ADC_Start+0x158>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d115      	bne.n	80043aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d026      	beq.n	80043e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043a8:	e01d      	b.n	80043e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <HAL_ADC_Start+0x158>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_ADC_Start+0xaa>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_ADC_Start+0x154>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10d      	bne.n	80043e6 <HAL_ADC_Start+0xc6>
 80043ca:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_ADC_Start+0x158>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f023 0206 	bic.w	r2, r3, #6
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fe:	e002      	b.n	8004406 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0202 	mvn.w	r2, #2
 8004416:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004422:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004426:	d113      	bne.n	8004450 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800442c:	4a11      	ldr	r2, [pc, #68]	; (8004474 <HAL_ADC_Start+0x154>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d105      	bne.n	800443e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <HAL_ADC_Start+0x158>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	e00c      	b.n	800446a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	e003      	b.n	800446a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40012800 	.word	0x40012800
 8004478:	40012400 	.word	0x40012400

0800447c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_ADC_ConfigChannel+0x20>
 8004498:	2302      	movs	r3, #2
 800449a:	e0dc      	b.n	8004656 <HAL_ADC_ConfigChannel+0x1da>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	d81c      	bhi.n	80044e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	3b05      	subs	r3, #5
 80044be:	221f      	movs	r2, #31
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	4019      	ands	r1, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	3b05      	subs	r3, #5
 80044d8:	fa00 f203 	lsl.w	r2, r0, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	635a      	str	r2, [r3, #52]	; 0x34
 80044e4:	e03c      	b.n	8004560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b0c      	cmp	r3, #12
 80044ec:	d81c      	bhi.n	8004528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	3b23      	subs	r3, #35	; 0x23
 8004500:	221f      	movs	r2, #31
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	4019      	ands	r1, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	3b23      	subs	r3, #35	; 0x23
 800451a:	fa00 f203 	lsl.w	r2, r0, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
 8004526:	e01b      	b.n	8004560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	3b41      	subs	r3, #65	; 0x41
 800453a:	221f      	movs	r2, #31
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	4019      	ands	r1, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	3b41      	subs	r3, #65	; 0x41
 8004554:	fa00 f203 	lsl.w	r2, r0, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b09      	cmp	r3, #9
 8004566:	d91c      	bls.n	80045a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	3b1e      	subs	r3, #30
 800457a:	2207      	movs	r2, #7
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	4019      	ands	r1, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6898      	ldr	r0, [r3, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	3b1e      	subs	r3, #30
 8004594:	fa00 f203 	lsl.w	r2, r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e019      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6919      	ldr	r1, [r3, #16]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	2207      	movs	r2, #7
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	4019      	ands	r1, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6898      	ldr	r0, [r3, #8]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	fa00 f203 	lsl.w	r2, r0, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d003      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80045e2:	2b11      	cmp	r3, #17
 80045e4:	d132      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_ADC_ConfigChannel+0x1e4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d125      	bne.n	800463c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d126      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800460c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d11a      	bne.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_ADC_ConfigChannel+0x1e8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a13      	ldr	r2, [pc, #76]	; (8004668 <HAL_ADC_ConfigChannel+0x1ec>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	0c9a      	lsrs	r2, r3, #18
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800462c:	e002      	b.n	8004634 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f9      	bne.n	800462e <HAL_ADC_ConfigChannel+0x1b2>
 800463a:	e007      	b.n	800464c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr
 8004660:	40012400 	.word	0x40012400
 8004664:	20000004 	.word	0x20000004
 8004668:	431bde83 	.word	0x431bde83

0800466c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d039      	beq.n	80046fe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <ADC_Enable+0x9c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1b      	ldr	r2, [pc, #108]	; (800470c <ADC_Enable+0xa0>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	0c9b      	lsrs	r3, r3, #18
 80046a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046a8:	e002      	b.n	80046b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f9      	bne.n	80046aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046b6:	f7ff fd2f 	bl	8004118 <HAL_GetTick>
 80046ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046bc:	e018      	b.n	80046f0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046be:	f7ff fd2b 	bl	8004118 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d911      	bls.n	80046f0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f043 0210 	orr.w	r2, r3, #16
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e007      	b.n	8004700 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d1df      	bne.n	80046be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000004 	.word	0x20000004
 800470c:	431bde83 	.word	0x431bde83

08004710 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d127      	bne.n	800477a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800473a:	f7ff fced 	bl	8004118 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004740:	e014      	b.n	800476c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004742:	f7ff fce9 	bl	8004118 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d90d      	bls.n	800476c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d0e3      	beq.n	8004742 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a0:	4013      	ands	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b6:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	60d3      	str	r3, [r2, #12]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <__NVIC_GetPriorityGrouping+0x18>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 0307 	and.w	r3, r3, #7
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db0b      	blt.n	8004812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4906      	ldr	r1, [pc, #24]	; (800481c <__NVIC_EnableIRQ+0x34>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2001      	movs	r0, #1
 800480a:	fa00 f202 	lsl.w	r2, r0, r2
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	; (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e8:	d301      	bcc.n	80048ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ea:	2301      	movs	r3, #1
 80048ec:	e00f      	b.n	800490e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <SysTick_Config+0x40>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048f6:	210f      	movs	r1, #15
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	f7ff ff90 	bl	8004820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <SysTick_Config+0x40>)
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004906:	4b04      	ldr	r3, [pc, #16]	; (8004918 <SysTick_Config+0x40>)
 8004908:	2207      	movs	r2, #7
 800490a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000e010 	.word	0xe000e010

0800491c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff2d 	bl	8004784 <__NVIC_SetPriorityGrouping>
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004944:	f7ff ff42 	bl	80047cc <__NVIC_GetPriorityGrouping>
 8004948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	6978      	ldr	r0, [r7, #20]
 8004950:	f7ff ff90 	bl	8004874 <NVIC_EncodePriority>
 8004954:	4602      	mov	r2, r0
 8004956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff5f 	bl	8004820 <__NVIC_SetPriority>
}
 8004962:	bf00      	nop
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff ff35 	bl	80047e8 <__NVIC_EnableIRQ>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff ffa2 	bl	80048d8 <SysTick_Config>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e043      	b.n	8004a3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <HAL_DMA_Init+0xa8>)
 80049be:	4413      	add	r3, r2
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_DMA_Init+0xac>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	009a      	lsls	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1f      	ldr	r2, [pc, #124]	; (8004a50 <HAL_DMA_Init+0xb0>)
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	bffdfff8 	.word	0xbffdfff8
 8004a4c:	cccccccd 	.word	0xcccccccd
 8004a50:	40020000 	.word	0x40020000

08004a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d005      	beq.n	8004a76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e051      	b.n	8004b1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 020e 	bic.w	r2, r2, #14
 8004a84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a22      	ldr	r2, [pc, #136]	; (8004b24 <HAL_DMA_Abort_IT+0xd0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d029      	beq.n	8004af4 <HAL_DMA_Abort_IT+0xa0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <HAL_DMA_Abort_IT+0xd4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_DMA_Abort_IT+0x9c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HAL_DMA_Abort_IT+0xd8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01a      	beq.n	8004aea <HAL_DMA_Abort_IT+0x96>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_DMA_Abort_IT+0xdc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d012      	beq.n	8004ae4 <HAL_DMA_Abort_IT+0x90>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <HAL_DMA_Abort_IT+0xe0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00a      	beq.n	8004ade <HAL_DMA_Abort_IT+0x8a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <HAL_DMA_Abort_IT+0xe4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d102      	bne.n	8004ad8 <HAL_DMA_Abort_IT+0x84>
 8004ad2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ad6:	e00e      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004adc:	e00b      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ae2:	e008      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae8:	e005      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aee:	e002      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004af0:	2310      	movs	r3, #16
 8004af2:	e000      	b.n	8004af6 <HAL_DMA_Abort_IT+0xa2>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <HAL_DMA_Abort_IT+0xe8>)
 8004af8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
    } 
  }
  return status;
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40020008 	.word	0x40020008
 8004b28:	4002001c 	.word	0x4002001c
 8004b2c:	40020030 	.word	0x40020030
 8004b30:	40020044 	.word	0x40020044
 8004b34:	40020058 	.word	0x40020058
 8004b38:	4002006c 	.word	0x4002006c
 8004b3c:	40020000 	.word	0x40020000

08004b40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d04f      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xc8>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04a      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d107      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <HAL_DMA_IRQHandler+0x1f0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d029      	beq.n	8004bee <HAL_DMA_IRQHandler+0xae>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a65      	ldr	r2, [pc, #404]	; (8004d34 <HAL_DMA_IRQHandler+0x1f4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0xaa>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a63      	ldr	r2, [pc, #396]	; (8004d38 <HAL_DMA_IRQHandler+0x1f8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01a      	beq.n	8004be4 <HAL_DMA_IRQHandler+0xa4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a62      	ldr	r2, [pc, #392]	; (8004d3c <HAL_DMA_IRQHandler+0x1fc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d012      	beq.n	8004bde <HAL_DMA_IRQHandler+0x9e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a60      	ldr	r2, [pc, #384]	; (8004d40 <HAL_DMA_IRQHandler+0x200>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x98>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5f      	ldr	r2, [pc, #380]	; (8004d44 <HAL_DMA_IRQHandler+0x204>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d102      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x92>
 8004bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bd0:	e00e      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bd6:	e00b      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bdc:	e008      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004be2:	e005      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be8:	e002      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004bea:	2340      	movs	r3, #64	; 0x40
 8004bec:	e000      	b.n	8004bf0 <HAL_DMA_IRQHandler+0xb0>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	4a55      	ldr	r2, [pc, #340]	; (8004d48 <HAL_DMA_IRQHandler+0x208>)
 8004bf2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8094 	beq.w	8004d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c06:	e08e      	b.n	8004d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d056      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x186>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d051      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 020a 	bic.w	r2, r2, #10
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a38      	ldr	r2, [pc, #224]	; (8004d30 <HAL_DMA_IRQHandler+0x1f0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d029      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x166>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a37      	ldr	r2, [pc, #220]	; (8004d34 <HAL_DMA_IRQHandler+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x162>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a35      	ldr	r2, [pc, #212]	; (8004d38 <HAL_DMA_IRQHandler+0x1f8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01a      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x15c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a34      	ldr	r2, [pc, #208]	; (8004d3c <HAL_DMA_IRQHandler+0x1fc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d012      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x156>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a32      	ldr	r2, [pc, #200]	; (8004d40 <HAL_DMA_IRQHandler+0x200>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00a      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x150>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a31      	ldr	r2, [pc, #196]	; (8004d44 <HAL_DMA_IRQHandler+0x204>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x14a>
 8004c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c88:	e00e      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8e:	e00b      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c94:	e008      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c9a:	e005      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca0:	e002      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	e000      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x168>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_DMA_IRQHandler+0x208>)
 8004caa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d034      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004cc4:	e02f      	b.n	8004d26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2208      	movs	r2, #8
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d028      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x1e8>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 020e 	bic.w	r2, r2, #14
 8004cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
    }
  }
  return;
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
}
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40020008 	.word	0x40020008
 8004d34:	4002001c 	.word	0x4002001c
 8004d38:	40020030 	.word	0x40020030
 8004d3c:	40020044 	.word	0x40020044
 8004d40:	40020058 	.word	0x40020058
 8004d44:	4002006c 	.word	0x4002006c
 8004d48:	40020000 	.word	0x40020000

08004d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b08b      	sub	sp, #44	; 0x2c
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d5e:	e127      	b.n	8004fb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d60:	2201      	movs	r2, #1
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f040 8116 	bne.w	8004faa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b12      	cmp	r3, #18
 8004d84:	d034      	beq.n	8004df0 <HAL_GPIO_Init+0xa4>
 8004d86:	2b12      	cmp	r3, #18
 8004d88:	d80d      	bhi.n	8004da6 <HAL_GPIO_Init+0x5a>
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d02b      	beq.n	8004de6 <HAL_GPIO_Init+0x9a>
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d804      	bhi.n	8004d9c <HAL_GPIO_Init+0x50>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d031      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d01c      	beq.n	8004dd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d9a:	e048      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d043      	beq.n	8004e28 <HAL_GPIO_Init+0xdc>
 8004da0:	2b11      	cmp	r3, #17
 8004da2:	d01b      	beq.n	8004ddc <HAL_GPIO_Init+0x90>
          break;
 8004da4:	e043      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004da6:	4a89      	ldr	r2, [pc, #548]	; (8004fcc <HAL_GPIO_Init+0x280>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d026      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
 8004dac:	4a87      	ldr	r2, [pc, #540]	; (8004fcc <HAL_GPIO_Init+0x280>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d806      	bhi.n	8004dc0 <HAL_GPIO_Init+0x74>
 8004db2:	4a87      	ldr	r2, [pc, #540]	; (8004fd0 <HAL_GPIO_Init+0x284>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d020      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
 8004db8:	4a86      	ldr	r2, [pc, #536]	; (8004fd4 <HAL_GPIO_Init+0x288>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
          break;
 8004dbe:	e036      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004dc0:	4a85      	ldr	r2, [pc, #532]	; (8004fd8 <HAL_GPIO_Init+0x28c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d019      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
 8004dc6:	4a85      	ldr	r2, [pc, #532]	; (8004fdc <HAL_GPIO_Init+0x290>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d016      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
 8004dcc:	4a84      	ldr	r2, [pc, #528]	; (8004fe0 <HAL_GPIO_Init+0x294>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_GPIO_Init+0xae>
          break;
 8004dd2:	e02c      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	623b      	str	r3, [r7, #32]
          break;
 8004dda:	e028      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	3304      	adds	r3, #4
 8004de2:	623b      	str	r3, [r7, #32]
          break;
 8004de4:	e023      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	3308      	adds	r3, #8
 8004dec:	623b      	str	r3, [r7, #32]
          break;
 8004dee:	e01e      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	330c      	adds	r3, #12
 8004df6:	623b      	str	r3, [r7, #32]
          break;
 8004df8:	e019      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e02:	2304      	movs	r3, #4
 8004e04:	623b      	str	r3, [r7, #32]
          break;
 8004e06:	e012      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e10:	2308      	movs	r3, #8
 8004e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	611a      	str	r2, [r3, #16]
          break;
 8004e1a:	e008      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	615a      	str	r2, [r3, #20]
          break;
 8004e26:	e002      	b.n	8004e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	623b      	str	r3, [r7, #32]
          break;
 8004e2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2bff      	cmp	r3, #255	; 0xff
 8004e32:	d801      	bhi.n	8004e38 <HAL_GPIO_Init+0xec>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	e001      	b.n	8004e3c <HAL_GPIO_Init+0xf0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2bff      	cmp	r3, #255	; 0xff
 8004e42:	d802      	bhi.n	8004e4a <HAL_GPIO_Init+0xfe>
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	e002      	b.n	8004e50 <HAL_GPIO_Init+0x104>
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	3b08      	subs	r3, #8
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	210f      	movs	r1, #15
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	401a      	ands	r2, r3
 8004e62:	6a39      	ldr	r1, [r7, #32]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8096 	beq.w	8004faa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_GPIO_Init+0x298>)
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	4a58      	ldr	r2, [pc, #352]	; (8004fe4 <HAL_GPIO_Init+0x298>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6193      	str	r3, [r2, #24]
 8004e8a:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <HAL_GPIO_Init+0x298>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e96:	4a54      	ldr	r2, [pc, #336]	; (8004fe8 <HAL_GPIO_Init+0x29c>)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4b      	ldr	r2, [pc, #300]	; (8004fec <HAL_GPIO_Init+0x2a0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_GPIO_Init+0x19e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <HAL_GPIO_Init+0x2a4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00d      	beq.n	8004ee6 <HAL_GPIO_Init+0x19a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a49      	ldr	r2, [pc, #292]	; (8004ff4 <HAL_GPIO_Init+0x2a8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <HAL_GPIO_Init+0x196>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a48      	ldr	r2, [pc, #288]	; (8004ff8 <HAL_GPIO_Init+0x2ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_GPIO_Init+0x192>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <HAL_GPIO_Init+0x1a0>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e004      	b.n	8004eec <HAL_GPIO_Init+0x1a0>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e002      	b.n	8004eec <HAL_GPIO_Init+0x1a0>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_GPIO_Init+0x1a0>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	f002 0203 	and.w	r2, r2, #3
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4093      	lsls	r3, r2
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004efc:	493a      	ldr	r1, [pc, #232]	; (8004fe8 <HAL_GPIO_Init+0x29c>)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	089b      	lsrs	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4938      	ldr	r1, [pc, #224]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]
 8004f22:	e006      	b.n	8004f32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f24:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	4933      	ldr	r1, [pc, #204]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f3e:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	492e      	ldr	r1, [pc, #184]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
 8004f4a:	e006      	b.n	8004f5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	4929      	ldr	r1, [pc, #164]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f66:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	4924      	ldr	r1, [pc, #144]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
 8004f72:	e006      	b.n	8004f82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f74:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	491f      	ldr	r1, [pc, #124]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	491a      	ldr	r1, [pc, #104]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60cb      	str	r3, [r1, #12]
 8004f9a:	e006      	b.n	8004faa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	4915      	ldr	r1, [pc, #84]	; (8004ffc <HAL_GPIO_Init+0x2b0>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	3301      	adds	r3, #1
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f47f aed0 	bne.w	8004d60 <HAL_GPIO_Init+0x14>
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	372c      	adds	r7, #44	; 0x2c
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	10210000 	.word	0x10210000
 8004fd0:	10110000 	.word	0x10110000
 8004fd4:	10120000 	.word	0x10120000
 8004fd8:	10310000 	.word	0x10310000
 8004fdc:	10320000 	.word	0x10320000
 8004fe0:	10220000 	.word	0x10220000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010800 	.word	0x40010800
 8004ff0:	40010c00 	.word	0x40010c00
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	40010400 	.word	0x40010400

08005000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
 800500c:	4613      	mov	r3, r2
 800500e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005010:	787b      	ldrb	r3, [r7, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800501c:	e003      	b.n	8005026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	041a      	lsls	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	611a      	str	r2, [r3, #16]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005048:	887a      	ldrh	r2, [r7, #2]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800504e:	e002      	b.n	8005056 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005050:	887a      	ldrh	r2, [r7, #2]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e10f      	b.n	8005292 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d106      	bne.n	800508c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fe fa8e 	bl	80035a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	; 0x24
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050a4:	f001 fb4c 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 80050a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4a7b      	ldr	r2, [pc, #492]	; (800529c <HAL_I2C_Init+0x23c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d807      	bhi.n	80050c4 <HAL_I2C_Init+0x64>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a7a      	ldr	r2, [pc, #488]	; (80052a0 <HAL_I2C_Init+0x240>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	bf94      	ite	ls
 80050bc:	2301      	movls	r3, #1
 80050be:	2300      	movhi	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e006      	b.n	80050d2 <HAL_I2C_Init+0x72>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a77      	ldr	r2, [pc, #476]	; (80052a4 <HAL_I2C_Init+0x244>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bf94      	ite	ls
 80050cc:	2301      	movls	r3, #1
 80050ce:	2300      	movhi	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0db      	b.n	8005292 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a72      	ldr	r2, [pc, #456]	; (80052a8 <HAL_I2C_Init+0x248>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0c9b      	lsrs	r3, r3, #18
 80050e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a64      	ldr	r2, [pc, #400]	; (800529c <HAL_I2C_Init+0x23c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d802      	bhi.n	8005114 <HAL_I2C_Init+0xb4>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	3301      	adds	r3, #1
 8005112:	e009      	b.n	8005128 <HAL_I2C_Init+0xc8>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	4a63      	ldr	r2, [pc, #396]	; (80052ac <HAL_I2C_Init+0x24c>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	3301      	adds	r3, #1
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	430b      	orrs	r3, r1
 800512e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800513a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4956      	ldr	r1, [pc, #344]	; (800529c <HAL_I2C_Init+0x23c>)
 8005144:	428b      	cmp	r3, r1
 8005146:	d80d      	bhi.n	8005164 <HAL_I2C_Init+0x104>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1e59      	subs	r1, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	fbb1 f3f3 	udiv	r3, r1, r3
 8005156:	3301      	adds	r3, #1
 8005158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515c:	2b04      	cmp	r3, #4
 800515e:	bf38      	it	cc
 8005160:	2304      	movcc	r3, #4
 8005162:	e04f      	b.n	8005204 <HAL_I2C_Init+0x1a4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <HAL_I2C_Init+0x130>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1e58      	subs	r0, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	440b      	add	r3, r1
 800517a:	fbb0 f3f3 	udiv	r3, r0, r3
 800517e:	3301      	adds	r3, #1
 8005180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e012      	b.n	80051b6 <HAL_I2C_Init+0x156>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e58      	subs	r0, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	0099      	lsls	r1, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a6:	3301      	adds	r3, #1
 80051a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Init+0x15e>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e022      	b.n	8005204 <HAL_I2C_Init+0x1a4>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10e      	bne.n	80051e4 <HAL_I2C_Init+0x184>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1e58      	subs	r0, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	440b      	add	r3, r1
 80051d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d8:	3301      	adds	r3, #1
 80051da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	e00f      	b.n	8005204 <HAL_I2C_Init+0x1a4>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e58      	subs	r0, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	0099      	lsls	r1, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fa:	3301      	adds	r3, #1
 80051fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	6809      	ldr	r1, [r1, #0]
 8005208:	4313      	orrs	r3, r2
 800520a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69da      	ldr	r2, [r3, #28]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6911      	ldr	r1, [r2, #16]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	430b      	orrs	r3, r1
 8005246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	000186a0 	.word	0x000186a0
 80052a0:	001e847f 	.word	0x001e847f
 80052a4:	003d08ff 	.word	0x003d08ff
 80052a8:	431bde83 	.word	0x431bde83
 80052ac:	10624dd3 	.word	0x10624dd3

080052b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	817b      	strh	r3, [r7, #10]
 80052c2:	460b      	mov	r3, r1
 80052c4:	813b      	strh	r3, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ca:	f7fe ff25 	bl	8004118 <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	f040 80d9 	bne.w	8005490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2319      	movs	r3, #25
 80052e4:	2201      	movs	r2, #1
 80052e6:	496d      	ldr	r1, [pc, #436]	; (800549c <HAL_I2C_Mem_Write+0x1ec>)
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fc6b 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0cc      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_I2C_Mem_Write+0x56>
 8005302:	2302      	movs	r3, #2
 8005304:	e0c5      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d007      	beq.n	800532c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2221      	movs	r2, #33	; 0x21
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800535c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a4d      	ldr	r2, [pc, #308]	; (80054a0 <HAL_I2C_Mem_Write+0x1f0>)
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800536e:	88f8      	ldrh	r0, [r7, #6]
 8005370:	893a      	ldrh	r2, [r7, #8]
 8005372:	8979      	ldrh	r1, [r7, #10]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	4603      	mov	r3, r0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fac6 	bl	8005910 <I2C_RequestMemoryWrite>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d052      	beq.n	8005430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e081      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fcec 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e06b      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_I2C_Mem_Write+0x180>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d017      	beq.n	8005430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1aa      	bne.n	800538e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fcd8 	bl	8005df2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	2b04      	cmp	r3, #4
 800544e:	d107      	bne.n	8005460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e016      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	e000      	b.n	8005492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	00100002 	.word	0x00100002
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	817b      	strh	r3, [r7, #10]
 80054b6:	460b      	mov	r3, r1
 80054b8:	813b      	strh	r3, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054be:	f7fe fe2b 	bl	8004118 <HAL_GetTick>
 80054c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f040 8218 	bne.w	8005902 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2319      	movs	r3, #25
 80054d8:	2201      	movs	r2, #1
 80054da:	4981      	ldr	r1, [pc, #516]	; (80056e0 <HAL_I2C_Mem_Read+0x23c>)
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fb71 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e20b      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Mem_Read+0x56>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e204      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d007      	beq.n	8005520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2222      	movs	r2, #34	; 0x22
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a61      	ldr	r2, [pc, #388]	; (80056e4 <HAL_I2C_Mem_Read+0x240>)
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005562:	88f8      	ldrh	r0, [r7, #6]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	8979      	ldrh	r1, [r7, #10]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4603      	mov	r3, r0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa56 	bl	8005a24 <I2C_RequestMemoryRead>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e1c0      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d113      	bne.n	80055b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	623b      	str	r3, [r7, #32]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	623b      	str	r3, [r7, #32]
 800559e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e194      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d11d      	bne.n	80055f6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055ca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055cc:	2300      	movs	r3, #0
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055f2:	b662      	cpsie	i
 80055f4:	e172      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d11d      	bne.n	800563a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800560e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005636:	b662      	cpsie	i
 8005638:	e150      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005660:	e13c      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	2b03      	cmp	r3, #3
 8005668:	f200 80f5 	bhi.w	8005856 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	2b01      	cmp	r3, #1
 8005672:	d123      	bne.n	80056bc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fbfb 	bl	8005e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e13d      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ba:	e10f      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d150      	bne.n	8005766 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	2200      	movs	r2, #0
 80056cc:	4906      	ldr	r1, [pc, #24]	; (80056e8 <HAL_I2C_Mem_Read+0x244>)
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa78 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e112      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
 80056de:	bf00      	nop
 80056e0:	00100002 	.word	0x00100002
 80056e4:	ffff0000 	.word	0xffff0000
 80056e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80056ec:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005730:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005764:	e0ba      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	2200      	movs	r2, #0
 800576e:	4967      	ldr	r1, [pc, #412]	; (800590c <HAL_I2C_Mem_Read+0x468>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa27 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0c1      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005790:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	2200      	movs	r2, #0
 80057cc:	494f      	ldr	r1, [pc, #316]	; (800590c <HAL_I2C_Mem_Read+0x468>)
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f9f8 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e092      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ec:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005820:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005854:	e042      	b.n	80058dc <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fb0a 	bl	8005e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e04c      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d118      	bne.n	80058dc <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f aebe 	bne.w	8005662 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	; 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	00010004 	.word	0x00010004

08005910 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	461a      	mov	r2, r3
 800591e:	4603      	mov	r3, r0
 8005920:	817b      	strh	r3, [r7, #10]
 8005922:	460b      	mov	r3, r1
 8005924:	813b      	strh	r3, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005938:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2200      	movs	r2, #0
 8005942:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f93c 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e05f      	b.n	8005a16 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005956:	897b      	ldrh	r3, [r7, #10]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	492d      	ldr	r1, [pc, #180]	; (8005a20 <I2C_RequestMemoryWrite+0x110>)
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f980 	bl	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e04c      	b.n	8005a16 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f9ea 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d107      	bne.n	80059ba <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e02b      	b.n	8005a16 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e021      	b.n	8005a14 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059d0:	893b      	ldrh	r3, [r7, #8]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	6a39      	ldr	r1, [r7, #32]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f9c4 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d107      	bne.n	8005a06 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e005      	b.n	8005a16 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0a:	893b      	ldrh	r3, [r7, #8]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	00010002 	.word	0x00010002

08005a24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	817b      	strh	r3, [r7, #10]
 8005a36:	460b      	mov	r3, r1
 8005a38:	813b      	strh	r3, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f8aa 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e09e      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a7a:	897b      	ldrh	r3, [r7, #10]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	494c      	ldr	r1, [pc, #304]	; (8005bc0 <I2C_RequestMemoryRead+0x19c>)
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f8ee 	bl	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e08b      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	6a39      	ldr	r1, [r7, #32]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f958 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d107      	bne.n	8005ade <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e06a      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d105      	bne.n	8005af4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ae8:	893b      	ldrh	r3, [r7, #8]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	611a      	str	r2, [r3, #16]
 8005af2:	e021      	b.n	8005b38 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005af4:	893b      	ldrh	r3, [r7, #8]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b04:	6a39      	ldr	r1, [r7, #32]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f932 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d107      	bne.n	8005b2a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e044      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b2e:	893b      	ldrh	r3, [r7, #8]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	6a39      	ldr	r1, [r7, #32]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f917 	bl	8005d70 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d107      	bne.n	8005b60 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e029      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f81f 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e013      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	4906      	ldr	r1, [pc, #24]	; (8005bc0 <I2C_RequestMemoryRead+0x19c>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f863 	bl	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010002 	.word	0x00010002

08005bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd4:	e025      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d021      	beq.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fe fa9b 	bl	8004118 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e023      	b.n	8005c6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d10d      	bne.n	8005c48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4013      	ands	r3, r2
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	e00c      	b.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	43da      	mvns	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d0b6      	beq.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c80:	e051      	b.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d123      	bne.n	8005cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005caa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f043 0204 	orr.w	r2, r3, #4
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e046      	b.n	8005d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d021      	beq.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fe fa19 	bl	8004118 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d116      	bne.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f043 0220 	orr.w	r2, r3, #32
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e020      	b.n	8005d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d10c      	bne.n	8005d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	43da      	mvns	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bf14      	ite	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	2300      	moveq	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	e00b      	b.n	8005d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	43da      	mvns	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4013      	ands	r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d18d      	bne.n	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d7c:	e02d      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f8ce 	bl	8005f20 <I2C_IsAcknowledgeFailed>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e02d      	b.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d021      	beq.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d96:	f7fe f9bf 	bl	8004118 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d116      	bne.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e007      	b.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d1ca      	bne.n	8005d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dfe:	e02d      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f88d 	bl	8005f20 <I2C_IsAcknowledgeFailed>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e02d      	b.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d021      	beq.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e18:	f7fe f97e 	bl	8004118 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d116      	bne.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f043 0220 	orr.w	r2, r3, #32
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e007      	b.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d1ca      	bne.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e80:	e042      	b.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d119      	bne.n	8005ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0210 	mvn.w	r2, #16
 8005e98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e029      	b.n	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec4:	f7fe f928 	bl	8004118 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d116      	bne.n	8005f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e007      	b.n	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d1b5      	bne.n	8005e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f36:	d11b      	bne.n	8005f70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e26c      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8087 	beq.w	80060aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f9c:	4b92      	ldr	r3, [pc, #584]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 030c 	and.w	r3, r3, #12
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d00c      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005fa8:	4b8f      	ldr	r3, [pc, #572]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d112      	bne.n	8005fda <HAL_RCC_OscConfig+0x5e>
 8005fb4:	4b8c      	ldr	r3, [pc, #560]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc0:	d10b      	bne.n	8005fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc2:	4b89      	ldr	r3, [pc, #548]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d06c      	beq.n	80060a8 <HAL_RCC_OscConfig+0x12c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d168      	bne.n	80060a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e246      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x76>
 8005fe4:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a7f      	ldr	r2, [pc, #508]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e02e      	b.n	8006050 <HAL_RCC_OscConfig+0xd4>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x98>
 8005ffa:	4b7b      	ldr	r3, [pc, #492]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a7a      	ldr	r2, [pc, #488]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a77      	ldr	r2, [pc, #476]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800600c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e01d      	b.n	8006050 <HAL_RCC_OscConfig+0xd4>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800601c:	d10c      	bne.n	8006038 <HAL_RCC_OscConfig+0xbc>
 800601e:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a71      	ldr	r2, [pc, #452]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a6e      	ldr	r2, [pc, #440]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	e00b      	b.n	8006050 <HAL_RCC_OscConfig+0xd4>
 8006038:	4b6b      	ldr	r3, [pc, #428]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6a      	ldr	r2, [pc, #424]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800603e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b68      	ldr	r3, [pc, #416]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a67      	ldr	r2, [pc, #412]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800604a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800604e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fe f85e 	bl	8004118 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fe f85a 	bl	8004118 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	; 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e1fa      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006072:	4b5d      	ldr	r3, [pc, #372]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0xe4>
 800607e:	e014      	b.n	80060aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fe f84a 	bl	8004118 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006088:	f7fe f846 	bl	8004118 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	; 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e1e6      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800609a:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0x10c>
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d063      	beq.n	800617e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060b6:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80060c2:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d11c      	bne.n	8006108 <HAL_RCC_OscConfig+0x18c>
 80060ce:	4b46      	ldr	r3, [pc, #280]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_RCC_OscConfig+0x176>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1ba      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f2:	4b3d      	ldr	r3, [pc, #244]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4939      	ldr	r1, [pc, #228]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	e03a      	b.n	800617e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006110:	4b36      	ldr	r3, [pc, #216]	; (80061ec <HAL_RCC_OscConfig+0x270>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fd ffff 	bl	8004118 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611e:	f7fd fffb 	bl	8004118 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e19b      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4927      	ldr	r1, [pc, #156]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b26      	ldr	r3, [pc, #152]	; (80061ec <HAL_RCC_OscConfig+0x270>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fd ffde 	bl	8004118 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006160:	f7fd ffda 	bl	8004118 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e17a      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d03a      	beq.n	8006200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d019      	beq.n	80061c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <HAL_RCC_OscConfig+0x274>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006198:	f7fd ffbe 	bl	8004118 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a0:	f7fd ffba 	bl	8004118 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e15a      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <HAL_RCC_OscConfig+0x26c>)
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061be:	2001      	movs	r0, #1
 80061c0:	f000 fafa 	bl	80067b8 <RCC_Delay>
 80061c4:	e01c      	b.n	8006200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <HAL_RCC_OscConfig+0x274>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061cc:	f7fd ffa4 	bl	8004118 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d2:	e00f      	b.n	80061f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fd ffa0 	bl	8004118 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d908      	bls.n	80061f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e140      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	42420000 	.word	0x42420000
 80061f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f4:	4b9e      	ldr	r3, [pc, #632]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e9      	bne.n	80061d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80a6 	beq.w	800635a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006212:	4b97      	ldr	r3, [pc, #604]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10d      	bne.n	800623a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621e:	4b94      	ldr	r3, [pc, #592]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	4a93      	ldr	r2, [pc, #588]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006228:	61d3      	str	r3, [r2, #28]
 800622a:	4b91      	ldr	r3, [pc, #580]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623a:	4b8e      	ldr	r3, [pc, #568]	; (8006474 <HAL_RCC_OscConfig+0x4f8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d118      	bne.n	8006278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006246:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <HAL_RCC_OscConfig+0x4f8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a8a      	ldr	r2, [pc, #552]	; (8006474 <HAL_RCC_OscConfig+0x4f8>)
 800624c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006252:	f7fd ff61 	bl	8004118 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625a:	f7fd ff5d 	bl	8004118 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b64      	cmp	r3, #100	; 0x64
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e0fd      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626c:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCC_OscConfig+0x4f8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x312>
 8006280:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4a7a      	ldr	r2, [pc, #488]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6213      	str	r3, [r2, #32]
 800628c:	e02d      	b.n	80062ea <HAL_RCC_OscConfig+0x36e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x334>
 8006296:	4b76      	ldr	r3, [pc, #472]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	4a75      	ldr	r2, [pc, #468]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 800629c:	f023 0301 	bic.w	r3, r3, #1
 80062a0:	6213      	str	r3, [r2, #32]
 80062a2:	4b73      	ldr	r3, [pc, #460]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4a72      	ldr	r2, [pc, #456]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062a8:	f023 0304 	bic.w	r3, r3, #4
 80062ac:	6213      	str	r3, [r2, #32]
 80062ae:	e01c      	b.n	80062ea <HAL_RCC_OscConfig+0x36e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	d10c      	bne.n	80062d2 <HAL_RCC_OscConfig+0x356>
 80062b8:	4b6d      	ldr	r3, [pc, #436]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	4a6c      	ldr	r2, [pc, #432]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062be:	f043 0304 	orr.w	r3, r3, #4
 80062c2:	6213      	str	r3, [r2, #32]
 80062c4:	4b6a      	ldr	r3, [pc, #424]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	4a69      	ldr	r2, [pc, #420]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	6213      	str	r3, [r2, #32]
 80062d0:	e00b      	b.n	80062ea <HAL_RCC_OscConfig+0x36e>
 80062d2:	4b67      	ldr	r3, [pc, #412]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	4a66      	ldr	r2, [pc, #408]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	6213      	str	r3, [r2, #32]
 80062de:	4b64      	ldr	r3, [pc, #400]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	4a63      	ldr	r2, [pc, #396]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80062e4:	f023 0304 	bic.w	r3, r3, #4
 80062e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d015      	beq.n	800631e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7fd ff11 	bl	8004118 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f8:	e00a      	b.n	8006310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7fd ff0d 	bl	8004118 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	; 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e0ab      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0ee      	beq.n	80062fa <HAL_RCC_OscConfig+0x37e>
 800631c:	e014      	b.n	8006348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631e:	f7fd fefb 	bl	8004118 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006324:	e00a      	b.n	800633c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f7fd fef7 	bl	8004118 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	; 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e095      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800633c:	4b4c      	ldr	r3, [pc, #304]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1ee      	bne.n	8006326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800634e:	4b48      	ldr	r3, [pc, #288]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4a47      	ldr	r2, [pc, #284]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8081 	beq.w	8006466 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006364:	4b42      	ldr	r3, [pc, #264]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d061      	beq.n	8006434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d146      	bne.n	8006406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006378:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <HAL_RCC_OscConfig+0x4fc>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fd fecb 	bl	8004118 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006386:	f7fd fec7 	bl	8004118 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e067      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d108      	bne.n	80063c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063ae:	4b30      	ldr	r3, [pc, #192]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	492d      	ldr	r1, [pc, #180]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063c0:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a19      	ldr	r1, [r3, #32]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	430b      	orrs	r3, r1
 80063d2:	4927      	ldr	r1, [pc, #156]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <HAL_RCC_OscConfig+0x4fc>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fd fe9b 	bl	8004118 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fd fe97 	bl	8004118 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e037      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x46a>
 8006404:	e02f      	b.n	8006466 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <HAL_RCC_OscConfig+0x4fc>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fd fe84 	bl	8004118 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006414:	f7fd fe80 	bl	8004118 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e020      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x498>
 8006432:	e018      	b.n	8006466 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e013      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_OscConfig+0x4f4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	429a      	cmp	r2, r3
 8006452:	d106      	bne.n	8006462 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d001      	beq.n	8006466 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40021000 	.word	0x40021000
 8006474:	40007000 	.word	0x40007000
 8006478:	42420060 	.word	0x42420060

0800647c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0d0      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006490:	4b6a      	ldr	r3, [pc, #424]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d910      	bls.n	80064c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	4b67      	ldr	r3, [pc, #412]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 0207 	bic.w	r2, r3, #7
 80064a6:	4965      	ldr	r1, [pc, #404]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ae:	4b63      	ldr	r3, [pc, #396]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d001      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0b8      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d020      	beq.n	800650e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064d8:	4b59      	ldr	r3, [pc, #356]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4a58      	ldr	r2, [pc, #352]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80064de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064f0:	4b53      	ldr	r3, [pc, #332]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a52      	ldr	r2, [pc, #328]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80064f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064fc:	4b50      	ldr	r3, [pc, #320]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	494d      	ldr	r1, [pc, #308]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800650a:	4313      	orrs	r3, r2
 800650c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d040      	beq.n	800659c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d107      	bne.n	8006532 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006522:	4b47      	ldr	r3, [pc, #284]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d115      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e07f      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d107      	bne.n	800654a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653a:	4b41      	ldr	r3, [pc, #260]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e073      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654a:	4b3d      	ldr	r3, [pc, #244]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e06b      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800655a:	4b39      	ldr	r3, [pc, #228]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	4936      	ldr	r1, [pc, #216]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800656c:	f7fd fdd4 	bl	8004118 <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	e00a      	b.n	800658a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006574:	f7fd fdd0 	bl	8004118 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e053      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658a:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 020c 	and.w	r2, r3, #12
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	429a      	cmp	r2, r3
 800659a:	d1eb      	bne.n	8006574 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800659c:	4b27      	ldr	r3, [pc, #156]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d210      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f023 0207 	bic.w	r2, r3, #7
 80065b2:	4922      	ldr	r1, [pc, #136]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ba:	4b20      	ldr	r3, [pc, #128]	; (800663c <HAL_RCC_ClockConfig+0x1c0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e032      	b.n	8006632 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d8:	4b19      	ldr	r3, [pc, #100]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4916      	ldr	r1, [pc, #88]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	490e      	ldr	r1, [pc, #56]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800660a:	f000 f82d 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 800660e:	4601      	mov	r1, r0
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <HAL_RCC_ClockConfig+0x1c4>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	4a0a      	ldr	r2, [pc, #40]	; (8006644 <HAL_RCC_ClockConfig+0x1c8>)
 800661c:	5cd3      	ldrb	r3, [r2, r3]
 800661e:	fa21 f303 	lsr.w	r3, r1, r3
 8006622:	4a09      	ldr	r2, [pc, #36]	; (8006648 <HAL_RCC_ClockConfig+0x1cc>)
 8006624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <HAL_RCC_ClockConfig+0x1d0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd fd32 	bl	8004094 <HAL_InitTick>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40022000 	.word	0x40022000
 8006640:	40021000 	.word	0x40021000
 8006644:	08008aac 	.word	0x08008aac
 8006648:	20000004 	.word	0x20000004
 800664c:	20000008 	.word	0x20000008

08006650 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <HAL_RCC_EnableCSS+0x14>)
 8006656:	2201      	movs	r2, #1
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	4242004c 	.word	0x4242004c

08006668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	b490      	push	{r4, r7}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800666e:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006670:	1d3c      	adds	r4, r7, #4
 8006672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006678:	4b28      	ldr	r3, [pc, #160]	; (800671c <HAL_RCC_GetSysClockFreq+0xb4>)
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	2300      	movs	r3, #0
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006692:	4b23      	ldr	r3, [pc, #140]	; (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d002      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x40>
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d003      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x46>
 80066a6:	e02d      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066a8:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066aa:	623b      	str	r3, [r7, #32]
      break;
 80066ac:	e02d      	b.n	800670a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	0c9b      	lsrs	r3, r3, #18
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066ba:	4413      	add	r3, r2
 80066bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80066c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80066cc:	4b14      	ldr	r3, [pc, #80]	; (8006720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	0c5b      	lsrs	r3, r3, #17
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066da:	4413      	add	r3, r2
 80066dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80066e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4a0f      	ldr	r2, [pc, #60]	; (8006724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066e6:	fb02 f203 	mul.w	r2, r2, r3
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
 80066f2:	e004      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4a0c      	ldr	r2, [pc, #48]	; (8006728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	623b      	str	r3, [r7, #32]
      break;
 8006702:	e002      	b.n	800670a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006706:	623b      	str	r3, [r7, #32]
      break;
 8006708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800670a:	6a3b      	ldr	r3, [r7, #32]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bc90      	pop	{r4, r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	0800821c 	.word	0x0800821c
 800671c:	0800822c 	.word	0x0800822c
 8006720:	40021000 	.word	0x40021000
 8006724:	007a1200 	.word	0x007a1200
 8006728:	003d0900 	.word	0x003d0900

0800672c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <HAL_RCC_GetHCLKFreq+0x10>)
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	20000004 	.word	0x20000004

08006740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006744:	f7ff fff2 	bl	800672c <HAL_RCC_GetHCLKFreq>
 8006748:	4601      	mov	r1, r0
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4a03      	ldr	r2, [pc, #12]	; (8006764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40021000 	.word	0x40021000
 8006764:	08008abc 	.word	0x08008abc

08006768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800676c:	f7ff ffde 	bl	800672c <HAL_RCC_GetHCLKFreq>
 8006770:	4601      	mov	r1, r0
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	0adb      	lsrs	r3, r3, #11
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	4a03      	ldr	r2, [pc, #12]	; (800678c <HAL_RCC_GetPCLK2Freq+0x24>)
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006784:	4618      	mov	r0, r3
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40021000 	.word	0x40021000
 800678c:	08008abc 	.word	0x08008abc

08006790 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d104      	bne.n	80067aa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80067a0:	f000 f828 	bl	80067f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	701a      	strb	r2, [r3, #0]
  }
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40021000 	.word	0x40021000
 80067b4:	4002100a 	.word	0x4002100a

080067b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <RCC_Delay+0x34>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <RCC_Delay+0x38>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	0a5b      	lsrs	r3, r3, #9
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
 80067d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80067d4:	bf00      	nop
  }
  while (Delay --);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1e5a      	subs	r2, r3, #1
 80067da:	60fa      	str	r2, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f9      	bne.n	80067d4 <RCC_Delay+0x1c>
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000004 	.word	0x20000004
 80067f0:	10624dd3 	.word	0x10624dd3

080067f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d07d      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800681c:	2300      	movs	r3, #0
 800681e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006820:	4b4f      	ldr	r3, [pc, #316]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10d      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682c:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	4a4b      	ldr	r2, [pc, #300]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006836:	61d3      	str	r3, [r2, #28]
 8006838:	4b49      	ldr	r3, [pc, #292]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006844:	2301      	movs	r3, #1
 8006846:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006848:	4b46      	ldr	r3, [pc, #280]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d118      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006854:	4b43      	ldr	r3, [pc, #268]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a42      	ldr	r2, [pc, #264]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800685a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006860:	f7fd fc5a 	bl	8004118 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006866:	e008      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006868:	f7fd fc56 	bl	8004118 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e06d      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687a:	4b3a      	ldr	r3, [pc, #232]	; (8006964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006886:	4b36      	ldr	r3, [pc, #216]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d02e      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d027      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068a4:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068ae:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068b4:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80068ba:	4a29      	ldr	r2, [pc, #164]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d014      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ca:	f7fd fc25 	bl	8004118 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d0:	e00a      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d2:	f7fd fc21 	bl	8004118 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e036      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ee      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068f4:	4b1a      	ldr	r3, [pc, #104]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4917      	ldr	r1, [pc, #92]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006902:	4313      	orrs	r3, r2
 8006904:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b14      	ldr	r3, [pc, #80]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	490b      	ldr	r1, [pc, #44]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006932:	4313      	orrs	r3, r2
 8006934:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0310 	and.w	r3, r3, #16
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4904      	ldr	r1, [pc, #16]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006950:	4313      	orrs	r3, r2
 8006952:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40021000 	.word	0x40021000
 8006964:	40007000 	.word	0x40007000
 8006968:	42420440 	.word	0x42420440

0800696c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e01d      	b.n	80069ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fd f98a 	bl	8003cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 fab4 	bl	8006f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e01d      	b.n	8006a10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f815 	bl	8006a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f000 fa89 	bl	8006f18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
	...

08006a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fcea 	bl	8007418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <HAL_TIM_PWM_Start+0x60>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d107      	bne.n	8006a5e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b06      	cmp	r3, #6
 8006a6e:	d007      	beq.n	8006a80 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40012c00 	.word	0x40012c00

08006a90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e07f      	b.n	8006ba4 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fd f929 	bl	8003d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad4:	f023 0307 	bic.w	r3, r3, #7
 8006ad8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f000 fa17 	bl	8006f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	4313      	orrs	r3, r2
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b30:	f023 030c 	bic.w	r3, r3, #12
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	031b      	lsls	r3, r3, #12
 8006b60:	4313      	orrs	r3, r2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <HAL_TIM_Encoder_Start+0x16>
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d008      	beq.n	8006bd2 <HAL_TIM_Encoder_Start+0x26>
 8006bc0:	e00f      	b.n	8006be2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fc24 	bl	8007418 <TIM_CCxChannelCmd>
      break;
 8006bd0:	e016      	b.n	8006c00 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	2104      	movs	r1, #4
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fc1c 	bl	8007418 <TIM_CCxChannelCmd>
      break;
 8006be0:	e00e      	b.n	8006c00 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2201      	movs	r2, #1
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fc14 	bl	8007418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fc0d 	bl	8007418 <TIM_CCxChannelCmd>
      break;
 8006bfe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e0b4      	b.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	f200 809f 	bhi.w	8006d8c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006d8d 	.word	0x08006d8d
 8006c5c:	08006d8d 	.word	0x08006d8d
 8006c60:	08006d8d 	.word	0x08006d8d
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006d8d 	.word	0x08006d8d
 8006c6c:	08006d8d 	.word	0x08006d8d
 8006c70:	08006d8d 	.word	0x08006d8d
 8006c74:	08006d0b 	.word	0x08006d0b
 8006c78:	08006d8d 	.word	0x08006d8d
 8006c7c:	08006d8d 	.word	0x08006d8d
 8006c80:	08006d8d 	.word	0x08006d8d
 8006c84:	08006d4b 	.word	0x08006d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f9a4 	bl	8006fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0208 	orr.w	r2, r2, #8
 8006ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0204 	bic.w	r2, r2, #4
 8006cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6999      	ldr	r1, [r3, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	619a      	str	r2, [r3, #24]
      break;
 8006cc6:	e062      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f9ea 	bl	80070a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6999      	ldr	r1, [r3, #24]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	619a      	str	r2, [r3, #24]
      break;
 8006d08:	e041      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fa33 	bl	800717c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0208 	orr.w	r2, r2, #8
 8006d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0204 	bic.w	r2, r2, #4
 8006d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69d9      	ldr	r1, [r3, #28]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	61da      	str	r2, [r3, #28]
      break;
 8006d48:	e021      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fa7d 	bl	8007250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69d9      	ldr	r1, [r3, #28]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	021a      	lsls	r2, r3, #8
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	61da      	str	r2, [r3, #28]
      break;
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIM_ConfigClockSource+0x18>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e0a6      	b.n	8006f0e <HAL_TIM_ConfigClockSource+0x166>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d067      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0x120>
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d80b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x6c>
 8006dfc:	2b10      	cmp	r3, #16
 8006dfe:	d073      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x140>
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d802      	bhi.n	8006e0a <HAL_TIM_ConfigClockSource+0x62>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d06f      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e08:	e078      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d06c      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x140>
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d06a      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e12:	e073      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e14:	2b70      	cmp	r3, #112	; 0x70
 8006e16:	d00d      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0x8c>
 8006e18:	2b70      	cmp	r3, #112	; 0x70
 8006e1a:	d804      	bhi.n	8006e26 <HAL_TIM_ConfigClockSource+0x7e>
 8006e1c:	2b50      	cmp	r3, #80	; 0x50
 8006e1e:	d033      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0xe0>
 8006e20:	2b60      	cmp	r3, #96	; 0x60
 8006e22:	d041      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e24:	e06a      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d066      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x152>
 8006e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e30:	d017      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e32:	e063      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f000 fac9 	bl	80073da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	609a      	str	r2, [r3, #8]
      break;
 8006e60:	e04c      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f000 fab2 	bl	80073da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e84:	609a      	str	r2, [r3, #8]
      break;
 8006e86:	e039      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6859      	ldr	r1, [r3, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f000 fa29 	bl	80072ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2150      	movs	r1, #80	; 0x50
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fa80 	bl	80073a6 <TIM_ITRx_SetConfig>
      break;
 8006ea6:	e029      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f000 fa47 	bl	8007348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2160      	movs	r1, #96	; 0x60
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fa70 	bl	80073a6 <TIM_ITRx_SetConfig>
      break;
 8006ec6:	e019      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6859      	ldr	r1, [r3, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f000 fa09 	bl	80072ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2140      	movs	r1, #64	; 0x40
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fa60 	bl	80073a6 <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e009      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f000 fa57 	bl	80073a6 <TIM_ITRx_SetConfig>
      break;
 8006ef8:	e000      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <TIM_Base_SetConfig+0xb8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00b      	beq.n	8006f48 <TIM_Base_SetConfig+0x30>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f36:	d007      	beq.n	8006f48 <TIM_Base_SetConfig+0x30>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <TIM_Base_SetConfig+0xbc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_Base_SetConfig+0x30>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <TIM_Base_SetConfig+0xc0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d108      	bne.n	8006f5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <TIM_Base_SetConfig+0xb8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_Base_SetConfig+0x62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d007      	beq.n	8006f7a <TIM_Base_SetConfig+0x62>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <TIM_Base_SetConfig+0xbc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_Base_SetConfig+0x62>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <TIM_Base_SetConfig+0xc0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a07      	ldr	r2, [pc, #28]	; (8006fd0 <TIM_Base_SetConfig+0xb8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800

08006fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f023 0302 	bic.w	r3, r3, #2
 8007024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <TIM_OC1_SetConfig+0xc8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d10c      	bne.n	8007052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0308 	bic.w	r3, r3, #8
 800703e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f023 0304 	bic.w	r3, r3, #4
 8007050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <TIM_OC1_SetConfig+0xc8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00

080070a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0210 	bic.w	r2, r3, #16
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0320 	bic.w	r3, r3, #32
 80070f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <TIM_OC2_SetConfig+0xd0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10d      	bne.n	8007124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a14      	ldr	r2, [pc, #80]	; (8007178 <TIM_OC2_SetConfig+0xd0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d113      	bne.n	8007154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800713a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	40012c00 	.word	0x40012c00

0800717c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a1d      	ldr	r2, [pc, #116]	; (800724c <TIM_OC3_SetConfig+0xd0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10d      	bne.n	80071f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a14      	ldr	r2, [pc, #80]	; (800724c <TIM_OC3_SetConfig+0xd0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d113      	bne.n	8007226 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	621a      	str	r2, [r3, #32]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00

08007250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800729a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a0f      	ldr	r2, [pc, #60]	; (80072e8 <TIM_OC4_SetConfig+0x98>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d109      	bne.n	80072c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	019b      	lsls	r3, r3, #6
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	40012c00 	.word	0x40012c00

080072ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0201 	bic.w	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 030a 	bic.w	r3, r3, #10
 8007328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	f023 0210 	bic.w	r2, r3, #16
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	031b      	lsls	r3, r3, #12
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	621a      	str	r2, [r3, #32]
}
 800739c:	bf00      	nop
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f043 0307 	orr.w	r3, r3, #7
 80073c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	021a      	lsls	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4313      	orrs	r3, r2
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	609a      	str	r2, [r3, #8]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2201      	movs	r2, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	431a      	orrs	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007474:	2302      	movs	r3, #2
 8007476:	e032      	b.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007500:	2302      	movs	r3, #2
 8007502:	e03d      	b.n	8007580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr

0800758a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e03f      	b.n	800761c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7fc fc9d 	bl	8003ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2224      	movs	r2, #36	; 0x24
 80075ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fc34 	bl	8007e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695a      	ldr	r2, [r3, #20]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007602:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b20      	cmp	r3, #32
 8007642:	f040 8083 	bne.w	800774c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_Transmit+0x2e>
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e07b      	b.n	800774e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_UART_Transmit+0x40>
 8007660:	2302      	movs	r3, #2
 8007662:	e074      	b.n	800774e <HAL_UART_Transmit+0x12a>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	; 0x21
 8007676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800767a:	f7fc fd4d 	bl	8004118 <HAL_GetTick>
 800767e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	88fa      	ldrh	r2, [r7, #6]
 800768a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800768c:	e042      	b.n	8007714 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a4:	d122      	bne.n	80076ec <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fa59 	bl	8007b68 <UART_WaitOnFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e046      	b.n	800774e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076d2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	3302      	adds	r3, #2
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	e017      	b.n	8007714 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	3301      	adds	r3, #1
 80076e8:	60bb      	str	r3, [r7, #8]
 80076ea:	e013      	b.n	8007714 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa36 	bl	8007b68 <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e023      	b.n	800774e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	60ba      	str	r2, [r7, #8]
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1b7      	bne.n	800768e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	2140      	movs	r1, #64	; 0x40
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa1d 	bl	8007b68 <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e00a      	b.n	800774e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	e000      	b.n	800774e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800774c:	2302      	movs	r3, #2
  }
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af02      	add	r7, sp, #8
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b20      	cmp	r3, #32
 8007774:	f040 8090 	bne.w	8007898 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_UART_Receive+0x2e>
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e088      	b.n	800789a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UART_Receive+0x40>
 8007792:	2302      	movs	r3, #2
 8007794:	e081      	b.n	800789a <HAL_UART_Receive+0x144>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2222      	movs	r2, #34	; 0x22
 80077a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077ac:	f7fc fcb4 	bl	8004118 <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80077be:	e05c      	b.n	800787a <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d6:	d12b      	bne.n	8007830 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	2120      	movs	r1, #32
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f9c0 	bl	8007b68 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e053      	b.n	800789a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10c      	bne.n	8007818 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	b29a      	uxth	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	3302      	adds	r3, #2
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	e030      	b.n	800787a <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b29b      	uxth	r3, r3
 8007820:	b2db      	uxtb	r3, r3
 8007822:	b29a      	uxth	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	3301      	adds	r3, #1
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	e024      	b.n	800787a <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2200      	movs	r2, #0
 8007838:	2120      	movs	r1, #32
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f994 	bl	8007b68 <UART_WaitOnFlagUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e027      	b.n	800789a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	60ba      	str	r2, [r7, #8]
 800785e:	b2ca      	uxtb	r2, r1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e00a      	b.n	800787a <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	1c59      	adds	r1, r3, #1
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d19d      	bne.n	80077c0 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	e000      	b.n	800789a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	4613      	mov	r3, r2
 80078ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d140      	bne.n	800793e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_UART_Receive_IT+0x26>
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e039      	b.n	8007940 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_UART_Receive_IT+0x38>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e032      	b.n	8007940 <HAL_UART_Receive_IT+0x9e>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2222      	movs	r2, #34	; 0x22
 80078fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007918:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0220 	orr.w	r2, r2, #32
 8007938:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	e000      	b.n	8007940 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800793e:	2302      	movs	r3, #2
  }
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
	...

0800794c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_UART_IRQHandler+0x52>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9ce 	bl	8007d38 <UART_Receive_IT>
      return;
 800799c:	e0cc      	b.n	8007b38 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80ab 	beq.w	8007afc <HAL_UART_IRQHandler+0x1b0>
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <HAL_UART_IRQHandler+0x70>
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80a0 	beq.w	8007afc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_UART_IRQHandler+0x90>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d4:	f043 0201 	orr.w	r2, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_UART_IRQHandler+0xb0>
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	f043 0202 	orr.w	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <HAL_UART_IRQHandler+0xd0>
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	f043 0204 	orr.w	r2, r3, #4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <HAL_UART_IRQHandler+0xf0>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a34:	f043 0208 	orr.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d078      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_UART_IRQHandler+0x112>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f96d 	bl	8007d38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bf14      	ite	ne
 8007a6c:	2301      	movne	r3, #1
 8007a6e:	2300      	moveq	r3, #0
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <HAL_UART_IRQHandler+0x13a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d031      	beq.n	8007aea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8b8 	bl	8007bfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d023      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d013      	beq.n	8007ada <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab6:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <HAL_UART_IRQHandler+0x1f4>)
 8007ab8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fc ffc8 	bl	8004a54 <HAL_DMA_Abort_IT>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad8:	e00e      	b.n	8007af8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f83b 	bl	8007b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae0:	e00a      	b.n	8007af8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f837 	bl	8007b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae8:	e006      	b.n	8007af8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f833 	bl	8007b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007af6:	e01e      	b.n	8007b36 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af8:	bf00      	nop
    return;
 8007afa:	e01c      	b.n	8007b36 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <HAL_UART_IRQHandler+0x1cc>
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8a4 	bl	8007c5e <UART_Transmit_IT>
    return;
 8007b16:	e00f      	b.n	8007b38 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <HAL_UART_IRQHandler+0x1ec>
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8eb 	bl	8007d08 <UART_EndTransmit_IT>
    return;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <HAL_UART_IRQHandler+0x1ec>
    return;
 8007b36:	bf00      	nop
  }
}
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	08007c37 	.word	0x08007c37

08007b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b78:	e02c      	b.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d028      	beq.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b88:	f7fc fac6 	bl	8004118 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d21d      	bcs.n	8007bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ba6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e00f      	b.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	461a      	mov	r2, r3
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d0c3      	beq.n	8007b7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695a      	ldr	r2, [r3, #20]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff ff80 	bl	8007b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b21      	cmp	r3, #33	; 0x21
 8007c70:	d144      	bne.n	8007cfc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7a:	d11a      	bne.n	8007cb2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c90:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	621a      	str	r2, [r3, #32]
 8007ca4:	e00e      	b.n	8007cc4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	621a      	str	r2, [r3, #32]
 8007cb0:	e008      	b.n	8007cc4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6211      	str	r1, [r2, #32]
 8007cbc:	781a      	ldrb	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10f      	bne.n	8007cf8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ce6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e000      	b.n	8007cfe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cfc:	2302      	movs	r3, #2
  }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr

08007d08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff0b 	bl	8007b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b22      	cmp	r3, #34	; 0x22
 8007d4a:	d171      	bne.n	8007e30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d54:	d123      	bne.n	8007d9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10e      	bne.n	8007d82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	1c9a      	adds	r2, r3, #2
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d80:	e029      	b.n	8007dd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d9c:	e01b      	b.n	8007dd6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6858      	ldr	r0, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6291      	str	r1, [r2, #40]	; 0x28
 8007db6:	b2c2      	uxtb	r2, r0
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	e00c      	b.n	8007dd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	1c58      	adds	r0, r3, #1
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	6288      	str	r0, [r1, #40]	; 0x28
 8007dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	4619      	mov	r1, r3
 8007de4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d120      	bne.n	8007e2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0220 	bic.w	r2, r2, #32
 8007df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695a      	ldr	r2, [r3, #20]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fb fc8c 	bl	8003740 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e002      	b.n	8007e32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e76:	f023 030c 	bic.w	r3, r3, #12
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	430b      	orrs	r3, r1
 8007e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a52      	ldr	r2, [pc, #328]	; (8007fe8 <UART_SetConfig+0x1ac>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d14e      	bne.n	8007f42 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ea4:	f7fe fc60 	bl	8006768 <HAL_RCC_GetPCLK2Freq>
 8007ea8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009a      	lsls	r2, r3, #2
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	4a4a      	ldr	r2, [pc, #296]	; (8007fec <UART_SetConfig+0x1b0>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	0119      	lsls	r1, r3, #4
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009a      	lsls	r2, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ee0:	4b42      	ldr	r3, [pc, #264]	; (8007fec <UART_SetConfig+0x1b0>)
 8007ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	2064      	movs	r0, #100	; 0x64
 8007eea:	fb00 f303 	mul.w	r3, r0, r3
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	3332      	adds	r3, #50	; 0x32
 8007ef4:	4a3d      	ldr	r2, [pc, #244]	; (8007fec <UART_SetConfig+0x1b0>)
 8007ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f00:	4419      	add	r1, r3
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009a      	lsls	r2, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f18:	4b34      	ldr	r3, [pc, #208]	; (8007fec <UART_SetConfig+0x1b0>)
 8007f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2064      	movs	r0, #100	; 0x64
 8007f22:	fb00 f303 	mul.w	r3, r0, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3332      	adds	r3, #50	; 0x32
 8007f2c:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <UART_SetConfig+0x1b0>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007f40:	e04d      	b.n	8007fde <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f42:	f7fe fbfd 	bl	8006740 <HAL_RCC_GetPCLK1Freq>
 8007f46:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009a      	lsls	r2, r3, #2
 8007f52:	441a      	add	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5e:	4a23      	ldr	r2, [pc, #140]	; (8007fec <UART_SetConfig+0x1b0>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	0119      	lsls	r1, r3, #4
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009a      	lsls	r2, r3, #2
 8007f72:	441a      	add	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <UART_SetConfig+0x1b0>)
 8007f80:	fba3 0302 	umull	r0, r3, r3, r2
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	2064      	movs	r0, #100	; 0x64
 8007f88:	fb00 f303 	mul.w	r3, r0, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	3332      	adds	r3, #50	; 0x32
 8007f92:	4a16      	ldr	r2, [pc, #88]	; (8007fec <UART_SetConfig+0x1b0>)
 8007f94:	fba2 2303 	umull	r2, r3, r2, r3
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f9e:	4419      	add	r1, r3
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009a      	lsls	r2, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <UART_SetConfig+0x1b0>)
 8007fb8:	fba3 0302 	umull	r0, r3, r3, r2
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	2064      	movs	r0, #100	; 0x64
 8007fc0:	fb00 f303 	mul.w	r3, r0, r3
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	3332      	adds	r3, #50	; 0x32
 8007fca:	4a08      	ldr	r2, [pc, #32]	; (8007fec <UART_SetConfig+0x1b0>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f003 020f 	and.w	r2, r3, #15
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	440a      	add	r2, r1
 8007fdc:	609a      	str	r2, [r3, #8]
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40013800 	.word	0x40013800
 8007fec:	51eb851f 	.word	0x51eb851f

08007ff0 <__errno>:
 8007ff0:	4b01      	ldr	r3, [pc, #4]	; (8007ff8 <__errno+0x8>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000010 	.word	0x20000010

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	2500      	movs	r5, #0
 8008000:	4e0c      	ldr	r6, [pc, #48]	; (8008034 <__libc_init_array+0x38>)
 8008002:	4c0d      	ldr	r4, [pc, #52]	; (8008038 <__libc_init_array+0x3c>)
 8008004:	1ba4      	subs	r4, r4, r6
 8008006:	10a4      	asrs	r4, r4, #2
 8008008:	42a5      	cmp	r5, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	f000 f8fa 	bl	8008204 <_init>
 8008010:	2500      	movs	r5, #0
 8008012:	4e0a      	ldr	r6, [pc, #40]	; (800803c <__libc_init_array+0x40>)
 8008014:	4c0a      	ldr	r4, [pc, #40]	; (8008040 <__libc_init_array+0x44>)
 8008016:	1ba4      	subs	r4, r4, r6
 8008018:	10a4      	asrs	r4, r4, #2
 800801a:	42a5      	cmp	r5, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008024:	4798      	blx	r3
 8008026:	3501      	adds	r5, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800802e:	4798      	blx	r3
 8008030:	3501      	adds	r5, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	08008b24 	.word	0x08008b24
 8008038:	08008b24 	.word	0x08008b24
 800803c:	08008b24 	.word	0x08008b24
 8008040:	08008b2c 	.word	0x08008b2c

08008044 <malloc>:
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <malloc+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f000 b86f 	b.w	800812c <_malloc_r>
 800804e:	bf00      	nop
 8008050:	20000010 	.word	0x20000010

08008054 <free>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <free+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f000 b81b 	b.w	8008094 <_free_r>
 800805e:	bf00      	nop
 8008060:	20000010 	.word	0x20000010

08008064 <memcmp>:
 8008064:	b530      	push	{r4, r5, lr}
 8008066:	2400      	movs	r4, #0
 8008068:	42a2      	cmp	r2, r4
 800806a:	d101      	bne.n	8008070 <memcmp+0xc>
 800806c:	2000      	movs	r0, #0
 800806e:	e007      	b.n	8008080 <memcmp+0x1c>
 8008070:	5d03      	ldrb	r3, [r0, r4]
 8008072:	3401      	adds	r4, #1
 8008074:	190d      	adds	r5, r1, r4
 8008076:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800807a:	42ab      	cmp	r3, r5
 800807c:	d0f4      	beq.n	8008068 <memcmp+0x4>
 800807e:	1b58      	subs	r0, r3, r5
 8008080:	bd30      	pop	{r4, r5, pc}

08008082 <memset>:
 8008082:	4603      	mov	r3, r0
 8008084:	4402      	add	r2, r0
 8008086:	4293      	cmp	r3, r2
 8008088:	d100      	bne.n	800808c <memset+0xa>
 800808a:	4770      	bx	lr
 800808c:	f803 1b01 	strb.w	r1, [r3], #1
 8008090:	e7f9      	b.n	8008086 <memset+0x4>
	...

08008094 <_free_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4605      	mov	r5, r0
 8008098:	2900      	cmp	r1, #0
 800809a:	d043      	beq.n	8008124 <_free_r+0x90>
 800809c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a0:	1f0c      	subs	r4, r1, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfb8      	it	lt
 80080a6:	18e4      	addlt	r4, r4, r3
 80080a8:	f000 f8aa 	bl	8008200 <__malloc_lock>
 80080ac:	4a1e      	ldr	r2, [pc, #120]	; (8008128 <_free_r+0x94>)
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	4610      	mov	r0, r2
 80080b2:	b933      	cbnz	r3, 80080c2 <_free_r+0x2e>
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6014      	str	r4, [r2, #0]
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 b8a0 	b.w	8008202 <__malloc_unlock>
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	d90b      	bls.n	80080de <_free_r+0x4a>
 80080c6:	6821      	ldr	r1, [r4, #0]
 80080c8:	1862      	adds	r2, r4, r1
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bf01      	itttt	eq
 80080ce:	681a      	ldreq	r2, [r3, #0]
 80080d0:	685b      	ldreq	r3, [r3, #4]
 80080d2:	1852      	addeq	r2, r2, r1
 80080d4:	6022      	streq	r2, [r4, #0]
 80080d6:	6063      	str	r3, [r4, #4]
 80080d8:	6004      	str	r4, [r0, #0]
 80080da:	e7ed      	b.n	80080b8 <_free_r+0x24>
 80080dc:	4613      	mov	r3, r2
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	b10a      	cbz	r2, 80080e6 <_free_r+0x52>
 80080e2:	42a2      	cmp	r2, r4
 80080e4:	d9fa      	bls.n	80080dc <_free_r+0x48>
 80080e6:	6819      	ldr	r1, [r3, #0]
 80080e8:	1858      	adds	r0, r3, r1
 80080ea:	42a0      	cmp	r0, r4
 80080ec:	d10b      	bne.n	8008106 <_free_r+0x72>
 80080ee:	6820      	ldr	r0, [r4, #0]
 80080f0:	4401      	add	r1, r0
 80080f2:	1858      	adds	r0, r3, r1
 80080f4:	4282      	cmp	r2, r0
 80080f6:	6019      	str	r1, [r3, #0]
 80080f8:	d1de      	bne.n	80080b8 <_free_r+0x24>
 80080fa:	6810      	ldr	r0, [r2, #0]
 80080fc:	6852      	ldr	r2, [r2, #4]
 80080fe:	4401      	add	r1, r0
 8008100:	6019      	str	r1, [r3, #0]
 8008102:	605a      	str	r2, [r3, #4]
 8008104:	e7d8      	b.n	80080b8 <_free_r+0x24>
 8008106:	d902      	bls.n	800810e <_free_r+0x7a>
 8008108:	230c      	movs	r3, #12
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	e7d4      	b.n	80080b8 <_free_r+0x24>
 800810e:	6820      	ldr	r0, [r4, #0]
 8008110:	1821      	adds	r1, r4, r0
 8008112:	428a      	cmp	r2, r1
 8008114:	bf01      	itttt	eq
 8008116:	6811      	ldreq	r1, [r2, #0]
 8008118:	6852      	ldreq	r2, [r2, #4]
 800811a:	1809      	addeq	r1, r1, r0
 800811c:	6021      	streq	r1, [r4, #0]
 800811e:	6062      	str	r2, [r4, #4]
 8008120:	605c      	str	r4, [r3, #4]
 8008122:	e7c9      	b.n	80080b8 <_free_r+0x24>
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	200001f0 	.word	0x200001f0

0800812c <_malloc_r>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	1ccd      	adds	r5, r1, #3
 8008130:	f025 0503 	bic.w	r5, r5, #3
 8008134:	3508      	adds	r5, #8
 8008136:	2d0c      	cmp	r5, #12
 8008138:	bf38      	it	cc
 800813a:	250c      	movcc	r5, #12
 800813c:	2d00      	cmp	r5, #0
 800813e:	4606      	mov	r6, r0
 8008140:	db01      	blt.n	8008146 <_malloc_r+0x1a>
 8008142:	42a9      	cmp	r1, r5
 8008144:	d903      	bls.n	800814e <_malloc_r+0x22>
 8008146:	230c      	movs	r3, #12
 8008148:	6033      	str	r3, [r6, #0]
 800814a:	2000      	movs	r0, #0
 800814c:	bd70      	pop	{r4, r5, r6, pc}
 800814e:	f000 f857 	bl	8008200 <__malloc_lock>
 8008152:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <_malloc_r+0xac>)
 8008154:	6814      	ldr	r4, [r2, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	b991      	cbnz	r1, 8008180 <_malloc_r+0x54>
 800815a:	4c20      	ldr	r4, [pc, #128]	; (80081dc <_malloc_r+0xb0>)
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	b91b      	cbnz	r3, 8008168 <_malloc_r+0x3c>
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f83d 	bl	80081e0 <_sbrk_r>
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	4629      	mov	r1, r5
 800816a:	4630      	mov	r0, r6
 800816c:	f000 f838 	bl	80081e0 <_sbrk_r>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d124      	bne.n	80081be <_malloc_r+0x92>
 8008174:	230c      	movs	r3, #12
 8008176:	4630      	mov	r0, r6
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	f000 f842 	bl	8008202 <__malloc_unlock>
 800817e:	e7e4      	b.n	800814a <_malloc_r+0x1e>
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	1b5b      	subs	r3, r3, r5
 8008184:	d418      	bmi.n	80081b8 <_malloc_r+0x8c>
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d90f      	bls.n	80081aa <_malloc_r+0x7e>
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	18cc      	adds	r4, r1, r3
 800818e:	50cd      	str	r5, [r1, r3]
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f836 	bl	8008202 <__malloc_unlock>
 8008196:	f104 000b 	add.w	r0, r4, #11
 800819a:	1d23      	adds	r3, r4, #4
 800819c:	f020 0007 	bic.w	r0, r0, #7
 80081a0:	1ac3      	subs	r3, r0, r3
 80081a2:	d0d3      	beq.n	800814c <_malloc_r+0x20>
 80081a4:	425a      	negs	r2, r3
 80081a6:	50e2      	str	r2, [r4, r3]
 80081a8:	e7d0      	b.n	800814c <_malloc_r+0x20>
 80081aa:	684b      	ldr	r3, [r1, #4]
 80081ac:	428c      	cmp	r4, r1
 80081ae:	bf16      	itet	ne
 80081b0:	6063      	strne	r3, [r4, #4]
 80081b2:	6013      	streq	r3, [r2, #0]
 80081b4:	460c      	movne	r4, r1
 80081b6:	e7eb      	b.n	8008190 <_malloc_r+0x64>
 80081b8:	460c      	mov	r4, r1
 80081ba:	6849      	ldr	r1, [r1, #4]
 80081bc:	e7cc      	b.n	8008158 <_malloc_r+0x2c>
 80081be:	1cc4      	adds	r4, r0, #3
 80081c0:	f024 0403 	bic.w	r4, r4, #3
 80081c4:	42a0      	cmp	r0, r4
 80081c6:	d005      	beq.n	80081d4 <_malloc_r+0xa8>
 80081c8:	1a21      	subs	r1, r4, r0
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f808 	bl	80081e0 <_sbrk_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d0cf      	beq.n	8008174 <_malloc_r+0x48>
 80081d4:	6025      	str	r5, [r4, #0]
 80081d6:	e7db      	b.n	8008190 <_malloc_r+0x64>
 80081d8:	200001f0 	.word	0x200001f0
 80081dc:	200001f4 	.word	0x200001f4

080081e0 <_sbrk_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	2300      	movs	r3, #0
 80081e4:	4c05      	ldr	r4, [pc, #20]	; (80081fc <_sbrk_r+0x1c>)
 80081e6:	4605      	mov	r5, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	f7fb fb3c 	bl	8003868 <_sbrk>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_sbrk_r+0x1a>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_sbrk_r+0x1a>
 80081f8:	602b      	str	r3, [r5, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20000444 	.word	0x20000444

08008200 <__malloc_lock>:
 8008200:	4770      	bx	lr

08008202 <__malloc_unlock>:
 8008202:	4770      	bx	lr

08008204 <_init>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr

08008210 <_fini>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr
